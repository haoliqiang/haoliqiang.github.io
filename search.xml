<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[angular1 directive]]></title>
      <url>http://haoliqiang.github.io/2017/01/08/angular-directive/</url>
      <content type="html"><![CDATA[<h2 id="angular1-directive"><a href="#angular1-directive" class="headerlink" title="angular1 directive"></a>angular1 directive</h2><blockquote>
<p>以下分享来自团队童鞋<a href="https://vernvn.github.io/" target="_blank" rel="external">vernvn</a></p>
</blockquote>
<h2 id="语义化标签，复用、封装，将逻辑与dom结合在一起，即插即用，指令化即模块化与通用化"><a href="#语义化标签，复用、封装，将逻辑与dom结合在一起，即插即用，指令化即模块化与通用化" class="headerlink" title="语义化标签，复用、封装，将逻辑与dom结合在一起，即插即用，指令化即模块化与通用化"></a>语义化标签，复用、封装，将逻辑与dom结合在一起，即插即用，指令化即模块化与通用化</h2><h2 id="demo1-以下全部简写"><a href="#demo1-以下全部简写" class="headerlink" title="demo1 (以下全部简写)"></a>demo1 (以下全部简写)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;hello-world&gt;&lt;/hello-world&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var app = angular.moudle(&apos;app&apos;,[])</div><div class="line">.directive(&apos;helloWorld&apos;,function()&#123;</div><div class="line">	return &#123;</div><div class="line">		restrict: &apos;ECMA&apos;,</div><div class="line">		replace :　true,</div><div class="line">		template : &apos;&lt;div&gt;hello world&lt;/div&gt;&apos;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<hr>
<p><br><br><a id="more"></a></p>
<h3 id="这里的ECMA是声明格式-默认为EA，其分别为"><a href="#这里的ECMA是声明格式-默认为EA，其分别为" class="headerlink" title="这里的ECMA是声明格式,默认为EA，其分别为"></a>这里的ECMA是声明格式,默认为EA，其分别为</h3><h3 id="E-元素名称-lt-my-directive-gt-lt-my-directive-gt"><a href="#E-元素名称-lt-my-directive-gt-lt-my-directive-gt" class="headerlink" title="E - 元素名称: &lt;my-directive&gt;&lt;/my-directive&gt;"></a>E - 元素名称: <code>&lt;my-directive&gt;&lt;/my-directive&gt;</code></h3><h3 id="A-属性-lt-div-my-directive-gt-lt-div-gt"><a href="#A-属性-lt-div-my-directive-gt-lt-div-gt" class="headerlink" title="A - 属性: &lt;div my-directive&gt;&lt;/div&gt;"></a>A - 属性: <code>&lt;div my-directive&gt;&lt;/div&gt;</code></h3><h3 id="C-类名-lt-div-class-39-my-directive-39-gt-lt-div-gt"><a href="#C-类名-lt-div-class-39-my-directive-39-gt-lt-div-gt" class="headerlink" title="C - 类名: &lt;div class=&#39;my-directive&#39;&gt;&lt;/div&gt;"></a>C - 类名: <code>&lt;div class=&#39;my-directive&#39;&gt;&lt;/div&gt;</code></h3><h3 id="M-注释-lt-directive-my-directive-exp-gt-很少使用-exp代表一个空格，必须存在，不然没效果"><a href="#M-注释-lt-directive-my-directive-exp-gt-很少使用-exp代表一个空格，必须存在，不然没效果" class="headerlink" title="M - 注释: &lt;!--directive:my-directive exp--&gt; (很少使用,exp代表一个空格，必须存在，不然没效果)"></a>M - 注释: <code>&lt;!--directive:my-directive exp--&gt;</code> (很少使用,exp代表一个空格，必须存在，不然没效果)</h3><h3 id="这里的一个小坑是驼峰命名，指令若是驼峰命名，视图需写成上述样式，中间用下划线相连"><a href="#这里的一个小坑是驼峰命名，指令若是驼峰命名，视图需写成上述样式，中间用下划线相连" class="headerlink" title="这里的一个小坑是驼峰命名，指令若是驼峰命名，视图需写成上述样式，中间用下划线相连"></a>这里的一个小坑是驼峰命名，指令若是驼峰命名，视图需写成上述样式，中间用下划线相连</h3><h3 id="replace-是否替换掉自定义的指令-默认是false"><a href="#replace-是否替换掉自定义的指令-默认是false" class="headerlink" title="replace, 是否替换掉自定义的指令,　默认是false"></a>replace, 是否替换掉自定义的指令,　默认是false</h3><h3 id="template是字符串模板，一般情况下都是templateUrl-毕竟代码量大了成了一坨"><a href="#template是字符串模板，一般情况下都是templateUrl-毕竟代码量大了成了一坨" class="headerlink" title="template是字符串模板，一般情况下都是templateUrl,毕竟代码量大了成了一坨;"></a>template是字符串模板，一般情况下都是templateUrl,毕竟代码量大了成了一坨;</h3><hr>
<p><br></p>
<h3 id="他还有一个属性transclude-transclude字面意思就是嵌入，需要将你的指令内部的元素（注意不是指令的模板）嵌入到你的模板中，也就是说将它从DOM元素中获取的内容放到它发现ng-transclude-指令的地方。transclude默认为false-如果设置为true-那么就需要配合ng-transclude指令来进行使用，例如上一个例子需要在模板里面写入"><a href="#他还有一个属性transclude-transclude字面意思就是嵌入，需要将你的指令内部的元素（注意不是指令的模板）嵌入到你的模板中，也就是说将它从DOM元素中获取的内容放到它发现ng-transclude-指令的地方。transclude默认为false-如果设置为true-那么就需要配合ng-transclude指令来进行使用，例如上一个例子需要在模板里面写入" class="headerlink" title="他还有一个属性transclude,transclude字面意思就是嵌入，需要将你的指令内部的元素（注意不是指令的模板）嵌入到你的模板中，也就是说将它从DOM元素中获取的内容放到它发现ng-transclude 指令的地方。transclude默认为false,如果设置为true,那么就需要配合ng-transclude指令来进行使用，例如上一个例子需要在模板里面写入"></a>他还有一个属性transclude,transclude字面意思就是嵌入，需要将你的指令内部的元素（注意不是指令的模板）嵌入到你的模板中，也就是说将它从DOM元素中获取的内容放到它发现ng-transclude 指令的地方。transclude默认为false,如果设置为true,那么就需要配合ng-transclude指令来进行使用，例如上一个例子需要在模板里面写入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">template: &apos;&lt;div&gt;hello world &lt;span ng-transclude&gt;&lt;/span&gt;&lt;/div&gt;&apos;</div></pre></td></tr></table></figure>
<h3 id="对应的html变为"><a href="#对应的html变为" class="headerlink" title="对应的html变为"></a>对应的html变为</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;hello-world&gt;</div><div class="line">	&lt;span&gt;i&apos;m here&lt;/span&gt;</div><div class="line">	&lt;span&gt;i&apos;m here too&lt;/span&gt;</div><div class="line">&lt;/hello-world&gt;</div></pre></td></tr></table></figure>
<h3 id="这个属性可以理解为把hello-world标签换成我们所编写的html模板，但是标签内部内容不变。"><a href="#这个属性可以理解为把hello-world标签换成我们所编写的html模板，但是标签内部内容不变。" class="headerlink" title="这个属性可以理解为把hello-world标签换成我们所编写的html模板，但是标签内部内容不变。"></a>这个属性可以理解为把hello-world标签换成我们所编写的html模板，但是标签内部内容不变。</h3><h3 id="对应视图则变为“hello-world-i’m-here-i’m-here-too”"><a href="#对应视图则变为“hello-world-i’m-here-i’m-here-too”" class="headerlink" title="对应视图则变为“hello world i’m here i’m here too”"></a>对应视图则变为<em>“hello world i’m here i’m here too”</em></h3><hr>
<p><br></p>
<h3 id="绑定策略"><a href="#绑定策略" class="headerlink" title="绑定策略"></a>绑定策略</h3><h3 id="scope-代表了独立作用域"><a href="#scope-代表了独立作用域" class="headerlink" title="scope:{} 代表了独立作用域;"></a>scope:{} 代表了独立作用域;</h3><h3 id="本地作用域属性：使用-符号将本地作用域同Dom属性的值进行绑定，指令内部作用域可以使用外部作用域的变量"><a href="#本地作用域属性：使用-符号将本地作用域同Dom属性的值进行绑定，指令内部作用域可以使用外部作用域的变量" class="headerlink" title="本地作用域属性：使用@符号将本地作用域同Dom属性的值进行绑定，指令内部作用域可以使用外部作用域的变量"></a>本地作用域属性：使用@符号将本地作用域同Dom属性的值进行绑定，指令内部作用域可以使用外部作用域的变量</h3><h3 id="双向绑定：通过-可以将本地作用域上的属性同父级作用域上的属性进行双向的数据绑定。就像普通的数据绑定一样，本地属性也会反映出父数据模型上所发生的改变"><a href="#双向绑定：通过-可以将本地作用域上的属性同父级作用域上的属性进行双向的数据绑定。就像普通的数据绑定一样，本地属性也会反映出父数据模型上所发生的改变" class="headerlink" title="双向绑定：通过=可以将本地作用域上的属性同父级作用域上的属性进行双向的数据绑定。就像普通的数据绑定一样，本地属性也会反映出父数据模型上所发生的改变"></a>双向绑定：通过=可以将本地作用域上的属性同父级作用域上的属性进行双向的数据绑定。就像普通的数据绑定一样，本地属性也会反映出父数据模型上所发生的改变</h3><h3 id="父级作用域绑定：-使用-amp-符号可以对父级作用域进行绑定，以便在其中运行函数。这就意味着这个值进行设置时会生成一个指向父级作用域的包装函数，下面请看分别的例子"><a href="#父级作用域绑定：-使用-amp-符号可以对父级作用域进行绑定，以便在其中运行函数。这就意味着这个值进行设置时会生成一个指向父级作用域的包装函数，下面请看分别的例子" class="headerlink" title="父级作用域绑定： 使用&amp;符号可以对父级作用域进行绑定，以便在其中运行函数。这就意味着这个值进行设置时会生成一个指向父级作用域的包装函数，下面请看分别的例子"></a>父级作用域绑定： 使用&amp;符号可以对父级作用域进行绑定，以便在其中运行函数。这就意味着这个值进行设置时会生成一个指向父级作用域的包装函数，下面请看分别的例子</h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.directive(&quot;direct&quot;,function()&#123;</div><div class="line">    return&#123;</div><div class="line">        restrict: &apos;ECMA&apos;,</div><div class="line">        template: &apos;&lt;div&gt;指令中：&#123;&#123; name &#125;&#125;&lt;/div&gt;&apos;,</div><div class="line">        scope:&#123;</div><div class="line">          name:&apos;@forName&apos;</div><div class="line">        &#125;</div><div class="line">     &#125; </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;direct for-name=&quot;&#123;&#123; Name &#125;&#125;&quot;&gt;&lt;/direct&gt;</div><div class="line">&lt;input ng-model=&apos;Name&apos;&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.controller(&apos;ctrl&apos;,function($scope)&#123;</div><div class="line">    $scope.Name = &apos;&apos;;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="这样成功地与父控制器中的Name绑定起来了，也可以写成name-’-’-这样就默认属性名为name了即"><a href="#这样成功地与父控制器中的Name绑定起来了，也可以写成name-’-’-这样就默认属性名为name了即" class="headerlink" title="这样成功地与父控制器中的Name绑定起来了，也可以写成name:’@’,这样就默认属性名为name了即"></a>这样成功地与父控制器中的Name绑定起来了，也可以写成name:’@’,这样就默认属性名为name了即</h3><hr>
<p><br></p>
<direct name=""></direct>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.directive(&quot;direct&quot;,function()&#123;</div><div class="line">    return&#123;</div><div class="line">        restrict: &apos;ECMA&apos;,</div><div class="line">        template: &apos;&lt;div&gt;指令中：&lt;input ng-model=&quot;Name&quot;/&gt;&lt;/div&gt;&apos;,</div><div class="line">        scope:&#123;</div><div class="line">          Name:&apos;=forName&apos;</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;direct for-name=&quot;Name&quot;&gt;&lt;/direct&gt;</div><div class="line">&lt;input  ng-model=&apos;Name&apos;&gt;</div></pre></td></tr></table></figure>
<h3 id="这样就实现了双向数据的绑定"><a href="#这样就实现了双向数据的绑定" class="headerlink" title="这样就实现了双向数据的绑定"></a>这样就实现了双向数据的绑定</h3><hr>
<p><br></p>
<h3 id="最后是-amp-它的含义是对父级作用域进行绑定，并将其中的属性包装成一个函数"><a href="#最后是-amp-它的含义是对父级作用域进行绑定，并将其中的属性包装成一个函数" class="headerlink" title="最后是&amp;它的含义是对父级作用域进行绑定，并将其中的属性包装成一个函数"></a>最后是&amp;它的含义是对父级作用域进行绑定，并将其中的属性包装成一个函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.directive(&quot;direct&quot;,function()&#123; </div><div class="line">	return&#123;</div><div class="line">    	restrict: &apos;ECMA&apos;,</div><div class="line">    	template: &apos;&lt;div&gt;&lt;input ng-model=&quot;model&quot;/&gt;\</div><div class="line">		      &lt;button ng-click=&quot;show(&#123;name:model&#125;)&quot;&gt;show&lt;/button&gt;&lt;/div&gt;&apos;,</div><div class="line">        scope:&#123;</div><div class="line">            show:&apos;&amp;&apos;              </div><div class="line">        &#125;                      </div><div class="line"> 	&#125;</div><div class="line">&#125;)</div><div class="line">.controller(&quot;nameController&quot;,function($scope)&#123;</div><div class="line">    $scope.showName=function(name)&#123; </div><div class="line">      alert(name); </div><div class="line">    &#125; </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;direct show=&quot;showName(name)&quot;&gt;&lt;/direct&gt;</div></pre></td></tr></table></figure>
<h3 id="这个例子中，通过模板中的ng-click触发了show函数并将一个叫做model的对象作为name参数传递了进去，而在html中，我们把show的属性值设为showName-name-。"><a href="#这个例子中，通过模板中的ng-click触发了show函数并将一个叫做model的对象作为name参数传递了进去，而在html中，我们把show的属性值设为showName-name-。" class="headerlink" title="这个例子中，通过模板中的ng-click触发了show函数并将一个叫做model的对象作为name参数传递了进去，而在html中，我们把show的属性值设为showName(name)。"></a>这个例子中，通过模板中的ng-click触发了show函数并将一个叫做model的对象作为name参数传递了进去，而在html中，我们把show的属性值设为showName(name)。</h3><hr>
<p><br></p>
<blockquote>
<p>为什么Angular要为我们提供这样一套绑定策略呢？就是因为它想让我们在为指令创建隔离作用域的同时，还能访问到父级中的属性，这就像，你在隔离作用域身上打了一个洞，然后用一条管道，把指令内部和外界的属性给连起来（绑定），并且一切的通信都只能通过这条管道来实行</p>
<hr>
<p><br></p>
<h2 id="demo2-complie-编译-、link-链接"><a href="#demo2-complie-编译-、link-链接" class="headerlink" title="demo2 complie(编译)、link(链接)"></a>demo2 complie(编译)、link(链接)</h2><h3 id="compile阶段进行标签解析和变换，link阶段进行数据绑定等操作"><a href="#compile阶段进行标签解析和变换，link阶段进行数据绑定等操作" class="headerlink" title="compile阶段进行标签解析和变换，link阶段进行数据绑定等操作"></a>compile阶段进行标签解析和变换，link阶段进行数据绑定等操作</h3></blockquote>
<h3 id="在编译的阶段，angularJs会遍历整个的文档并根据JavaScript中指令定义来处理页面上什么的指令。在遍历的过程中，有可能一层套着一层，一直延深处遍历。一但遍历和编译完毕就会返回一个叫做模板函数的函数。在这个函数没被返回（return）之前我们可以对编译后的DOM树进行修改。通常情况下，如果设置了compile函数，说明我们希望在指令和实时数据被放到DOM中之前进行DOM操作，在这个函数中进行诸如添加和删除节点等DOM操作是安全的。"><a href="#在编译的阶段，angularJs会遍历整个的文档并根据JavaScript中指令定义来处理页面上什么的指令。在遍历的过程中，有可能一层套着一层，一直延深处遍历。一但遍历和编译完毕就会返回一个叫做模板函数的函数。在这个函数没被返回（return）之前我们可以对编译后的DOM树进行修改。通常情况下，如果设置了compile函数，说明我们希望在指令和实时数据被放到DOM中之前进行DOM操作，在这个函数中进行诸如添加和删除节点等DOM操作是安全的。" class="headerlink" title="在编译的阶段，angularJs会遍历整个的文档并根据JavaScript中指令定义来处理页面上什么的指令。在遍历的过程中，有可能一层套着一层，一直延深处遍历。一但遍历和编译完毕就会返回一个叫做模板函数的函数。在这个函数没被返回（return）之前我们可以对编译后的DOM树进行修改。通常情况下，如果设置了compile函数，说明我们希望在指令和实时数据被放到DOM中之前进行DOM操作，在这个函数中进行诸如添加和删除节点等DOM操作是安全的。"></a>在编译的阶段，angularJs会遍历整个的文档并根据JavaScript中指令定义来处理页面上什么的指令。在遍历的过程中，有可能一层套着一层，一直延深处遍历。一但遍历和编译完毕就会返回一个叫做模板函数的函数。在这个函数没被返回（return）之前我们可以对编译后的DOM树进行修改。通常情况下，如果设置了compile函数，说明我们希望在指令和实时数据被放到DOM中之前进行DOM操作，在这个函数中进行诸如添加和删除节点等DOM操作是安全的。</h3><p><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;hello autohello=5&gt;</div><div class="line">    &lt;p&gt;小平你好&lt;/p&gt;</div><div class="line">&lt;/hello&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">app.directive(&apos;hello&apos;,function()&#123;</div><div class="line">    return &#123;</div><div class="line">        restrict:&apos;EA&apos;,</div><div class="line">        compile : function(ele,attrs)&#123;</div><div class="line">            var tpl = ele.children().clone();</div><div class="line">            for(var i=0;i&lt;attrs.autohello -1;i++)&#123;</div><div class="line">                ele.append(tpl.clone())</div><div class="line">            &#125;;</div><div class="line">            return function(scope,ele,attrs,ctrl)&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<hr>
<p><br></p>
<h3 id="我们写了一个DIV标签，定义了一个autohello的一个属性，属性值5-我们想把-“小平你好的这几句话”输出5遍。我们定义个一个compile-的函数，里面进行了一些DOM操作。在最后return一个闭包函数就是link函数，如果同时设置这两个选项，会将compile返回的函数当做链接函数，而link函数不起作用"><a href="#我们写了一个DIV标签，定义了一个autohello的一个属性，属性值5-我们想把-“小平你好的这几句话”输出5遍。我们定义个一个compile-的函数，里面进行了一些DOM操作。在最后return一个闭包函数就是link函数，如果同时设置这两个选项，会将compile返回的函数当做链接函数，而link函数不起作用" class="headerlink" title="我们写了一个DIV标签，定义了一个autohello的一个属性，属性值5.我们想把 “小平你好的这几句话”输出5遍。我们定义个一个compile 的函数，里面进行了一些DOM操作。在最后return一个闭包函数就是link函数，如果同时设置这两个选项，会将compile返回的函数当做链接函数，而link函数不起作用"></a>我们写了一个DIV标签，定义了一个autohello的一个属性，属性值5.我们想把 “小平你好的这几句话”输出5遍。我们定义个一个compile 的函数，里面进行了一些DOM操作。在最后return一个闭包函数就是link函数，如果同时设置这两个选项，会将compile返回的函数当做链接函数，而link函数不起作用</h3><hr>
<p><br></p>
<h2 id="compile与link函数的区别：compile函数的作用是对指令的模板进行转换，而link函数是在模型和视图之间建立关联，包括事件监听，即scope之后再链接阶段才能绑定到元素上，对于同一个指令的多个实例，compile只会执行一次，而link对于指令的每次实例都会执行一次，一般情况下，compile函数用的不多，只要编写link函数就够了"><a href="#compile与link函数的区别：compile函数的作用是对指令的模板进行转换，而link函数是在模型和视图之间建立关联，包括事件监听，即scope之后再链接阶段才能绑定到元素上，对于同一个指令的多个实例，compile只会执行一次，而link对于指令的每次实例都会执行一次，一般情况下，compile函数用的不多，只要编写link函数就够了" class="headerlink" title="compile与link函数的区别：compile函数的作用是对指令的模板进行转换，而link函数是在模型和视图之间建立关联，包括事件监听，即scope之后再链接阶段才能绑定到元素上，对于同一个指令的多个实例，compile只会执行一次，而link对于指令的每次实例都会执行一次，一般情况下，compile函数用的不多，只要编写link函数就够了"></a>compile与link函数的区别：compile函数的作用是对指令的模板进行转换，而link函数是在模型和视图之间建立关联，包括事件监听，即scope之后再链接阶段才能绑定到元素上，对于同一个指令的多个实例，compile只会执行一次，而link对于指令的每次实例都会执行一次，一般情况下，compile函数用的不多，只要编写link函数就够了</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">var expanderModule=angular.module(&apos;expanderModule&apos;, [])</div><div class="line">expanderModule.directive(&apos;expander&apos;, function() &#123;</div><div class="line">    return &#123;</div><div class="line">        restrict : &apos;EA&apos;,</div><div class="line">        replace : true,</div><div class="line">        transclude : true,</div><div class="line">        scope : &#123;</div><div class="line">            title : &apos;=expanderTitle&apos;</div><div class="line">        &#125;,</div><div class="line">        template : &apos;&lt;div&gt;&apos;</div><div class="line">                 + &apos;&lt;div class=&quot;title&quot; ng-click=&quot;toggle()&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;&apos;</div><div class="line">                 + &apos;&lt;div class=&quot;body&quot; ng-show=&quot;showMe&quot; ng-transclude&gt;&lt;/div&gt;&apos;</div><div class="line">                 + &apos;&lt;/div&gt;&apos;,</div><div class="line">        link : function(scope, element, attrs) &#123;</div><div class="line">            scope.showMe = false;</div><div class="line">            scope.toggle = function toggle() &#123;s</div><div class="line">                scope.showMe = !scope.showMe;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">expanderModule.controller(&apos;SomeController&apos;,function($scope) &#123;</div><div class="line">    $scope.title = &apos;点击展开&apos;;</div><div class="line">    $scope.text = &apos;这里是内部的内容。&apos;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;html ng-app=&apos;expanderModule&apos;&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div ng-controller=&apos;SomeController&apos;&gt;</div><div class="line">            &lt;expander class=&apos;expander&apos; expander-title=&apos;title&apos;&gt;</div><div class="line">                &#123;&#123;text&#125;&#125;</div><div class="line">            &lt;/expander&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<hr>
<p><br></p>
<h3 id="经常使用的一个指令例子："><a href="#经常使用的一个指令例子：" class="headerlink" title="经常使用的一个指令例子："></a>经常使用的一个指令例子：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">home.directive(&apos;compileNav&apos;,[&apos;$http&apos;,&apos;$compile&apos;,function($http,$compile)&#123;</div><div class="line">    return&#123;</div><div class="line">        restrict: &apos;EA&apos;,</div><div class="line">        replace: true,</div><div class="line">        controller: &apos;homeController&apos;,</div><div class="line">        link : function(scope,element,attrs,ctrl)&#123;</div><div class="line">            scope.$watch(function()&#123;</div><div class="line">                 return ctrl.mainservice.NavSrc;  //进行监听，若有模板存在，则通过$http进行加载，</div><div class="line">            &#125;,function(newVal)&#123;</div><div class="line">                if(newVal)&#123;</div><div class="line">                    $http.get(newVal).then(function(response)&#123;</div><div class="line">                        $(&apos;.main-menu&apos;).html($compile(response.data)(scope));</div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angular1 servicce]]></title>
      <url>http://haoliqiang.github.io/2017/01/08/angular/</url>
      <content type="html"><![CDATA[<h2 id="重点：angular1核心之一service"><a href="#重点：angular1核心之一service" class="headerlink" title="重点：angular1核心之一service"></a>重点：angular1核心之一service</h2><blockquote>
<p>以下分享来自团队童鞋<a href="https://vernvn.github.io/" target="_blank" rel="external">vernvn</a></p>
</blockquote>
<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><h3 id="自定义或内建服务，它是一个函数或对象，"><a href="#自定义或内建服务，它是一个函数或对象，" class="headerlink" title="自定义或内建服务，它是一个函数或对象，"></a>自定义或内建服务，它是一个函数或对象，</h3><h4 id="http服务"><a href="#http服务" class="headerlink" title="$http服务"></a>$http服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.controller(&apos;ctrl&apos;,function($scope,$http)&#123;</div><div class="line">	$http.get(&apos;post/json&apos;).then(function(data)&#123;</div><div class="line">		$scope.name = data.name</div><div class="line">	&#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<hr>
<p><br><br><a id="more"></a></p>
<h3 id="创建自定义服务-五种方法，constant-value-factory-service-provider-一般情况下factory与service使用较多，angular内置服务都是以-开头，所以自定义的服务应该避免以-开头，造成混乱。"><a href="#创建自定义服务-五种方法，constant-value-factory-service-provider-一般情况下factory与service使用较多，angular内置服务都是以-开头，所以自定义的服务应该避免以-开头，造成混乱。" class="headerlink" title="创建自定义服务,五种方法，constant,value,factory,service,provider,一般情况下factory与service使用较多，angular内置服务都是以$开头，所以自定义的服务应该避免以$开头，造成混乱。"></a>创建自定义服务,五种方法，constant,value,factory,service,provider,一般情况下factory与service使用较多，angular内置服务都是以$开头，所以自定义的服务应该避免以$开头，造成混乱。</h3><blockquote>
<p>所有类型的service都是单体，单体是什么？单体是一种设计模式，它限制了每一个类仅能够实例化为一个对象，无论我们在什么地方注入，将永远使用同一个实例，换句话就是，如果我们在一个地方改变了其中的某个值，其他地方也会发生相应的改变；<br><img src="https://segmentfault.com/img/bVm9Et" alt="providerToservice"></p>
</blockquote>
<h3 id="constant"><a href="#constant" class="headerlink" title="constant"></a>constant</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.constant(&apos;myconstant&apos;,&#123;</div><div class="line">	config1 :　&apos;defaultValue&apos;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>constant是用来在指令中提供默认配置，放入的值不会改变;</li>
</ul>
<hr>
<p><br></p>
<h3 id="value"><a href="#value" class="headerlink" title="value"></a>value</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.value(&apos;myvalue&apos;,&#123;</div><div class="line">	config2: &apos;changeValue&apos;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>value经常用来保存值，数值是可以改变的，这是和constant最大区别，但是不能对其中的值进行计算</li>
</ul>
<hr>
<p><br></p>
<h3 id="provider"><a href="#provider" class="headerlink" title="provider"></a>provider</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.provider(&apos;myprovider&apos;,function()&#123;</div><div class="line">	this.$get = function()&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>通过provider方法创建的服务一定要包含$get方法，否则会报错，provider注入的结果就是$get返回的结果，并且在三种创建服务的方法中，只有provider方法创建的服务可以传进config函数，以用于在对象启动前，对模块进行配置，但是在config中进行配置的只能在是$get函数之外定义的变量,注入config函数时，参数名必须是  <strong>服务名+Provider</strong>,例如下面代码只有color能被访问到，getcolor却不能<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">app.provider(&apos;myprovider&apos;,function()&#123;</div><div class="line">	this.color = &apos;&apos;;</div><div class="line">	this.$get = function()&#123;</div><div class="line">		var that = this;</div><div class="line">		return &#123;</div><div class="line">			getcolor : function()&#123;</div><div class="line">				return that.color</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.config(function(myproviderProvider)&#123;</div><div class="line">	myproviderProvider.color = &apos;red&apos;;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<hr>
<p><br></p>
<h3 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.factory(&apos;myfactory&apos;,function()&#123;</div><div class="line">	var factory = &#123;&#125;;</div><div class="line">	return factory;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>通过factory创建的服务必须有返回值，即return函数，factory方法注入的结果即是return返回的结果，可以使用注入对象的定义的方法，例如<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	var factory = &#123;&#125;;</div><div class="line">	var _name = &apos;lee&apos;;</div><div class="line">	factory.getname = function()&#123;</div><div class="line">		return _name;</div><div class="line">	&#125;;</div><div class="line">	return factory;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p><br></p>
<h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.service(&apos;myservice&apos;,function()&#123;</div><div class="line">	this.saysomething = function()&#123;&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>通过service方法创建的服务可以不用返回任何值，因为service本身返回一个构造器，系统会用new关键字来创建一个对象，所以我们可以在service内部使用this来进行扩展。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">app.service(&apos;myservice&apos;,function()&#123;</div><div class="line">	this.name = &apos;&apos;;</div><div class="line">	this.getname = function()&#123;</div><div class="line">		return this.name;</div><div class="line">	&#125;</div><div class="line">	this.setname = function(name)&#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p><br><br>上面的代码也可以用以下方式表示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">app.factory(&apos;myservice&apos;,function()&#123;</div><div class="line">	return new Foobar();</div><div class="line">&#125;)</div><div class="line">function Foobar()&#123;</div><div class="line">	this.name = &apos;&apos;;</div><div class="line">	this.getname = function()&#123;</div><div class="line">		return this.name</div><div class="line">	&#125;</div><div class="line">	this.setname = function(name)&#123;</div><div class="line">		this.name = name</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Foobar是一个’类’-如果已经有个一个类，诸如Foobar，只需要注入进服务"><a href="#Foobar是一个’类’-如果已经有个一个类，诸如Foobar，只需要注入进服务" class="headerlink" title="Foobar是一个’类’,如果已经有个一个类，诸如Foobar，只需要注入进服务"></a>Foobar是一个’类’,如果已经有个一个类，诸如Foobar，只需要注入进服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.service(&apos;myservice&apos;,Foobar);</div></pre></td></tr></table></figure>
<hr>
<p><br></p>
<h3 id="官方小例子："><a href="#官方小例子：" class="headerlink" title="官方小例子："></a>官方小例子：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.service(&apos;lee&apos;,function()&#123;</div><div class="line">	this.myfunc = function(x)&#123;</div><div class="line">		return x.tostring(16)</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.controller(&apos;ctrl&apos;,function($scope,lee)&#123;</div><div class="line">	$scope.hex = lee.myfunc(255);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div ng-controller=&quot;ctrl&quot;&gt;</div><div class="line">	&lt;div&gt;&#123;&#123;hex&#125;&#125;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<hr>
<p><br></p>
<h3 id="项目中的服务例子"><a href="#项目中的服务例子" class="headerlink" title="项目中的服务例子"></a>项目中的服务例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">angular.module(&apos;clientModule&apos;,[&apos;home&apos;])</div><div class="line">.factory(&apos;clientService&apos;,[&apos;$http&apos;,&apos;$q&apos;,&apos;mainservice&apos;,function($http,$q,mainservice)&#123;  </div><div class="line">//$q是angular内置服务，可以使你异步地执行函数</div><div class="line">	var communicateIp = &apos;http://10.0.1.8:8010/&apos;;</div><div class="line">	mainservice.ip = communicateIp;</div><div class="line">	function handleRequest(method,url,data)&#123;  //定义一个接口管理的方法</div><div class="line">		var deferred = $q.defer();            </div><div class="line">// defer的字面意思是延迟,$q.defer(),可以创建一个deferred实例。 </div><div class="line">		var config = &#123;</div><div class="line">			method : method,</div><div class="line">			url : url</div><div class="line">		&#125;;</div><div class="line">		if(&apos;POST&apos;===method)&#123;</div><div class="line">			config.data = data;</div><div class="line">		&#125;else if(&apos;GET&apos;=== method)&#123;</div><div class="line">			config.params = data;</div><div class="line">		&#125;else if(&apos;DELETE&apos;=== method)&#123;</div><div class="line">			config.params = data;</div><div class="line">		&#125;</div><div class="line">		$http(config).success(function(data)&#123;</div><div class="line">			deferred.resolve(data);</div><div class="line">		&#125;).error(function(err)&#123;</div><div class="line">			deferred.reject(err);</div><div class="line">		&#125;);</div><div class="line">		return deferred.promise;   </div><div class="line">//通过deferred延迟对象，可以得到一个承诺promise，而promise会返回当前任务的完成结果						</div><div class="line">	&#125;;</div><div class="line">	return &#123;</div><div class="line">	    exit: function(params)&#123;</div><div class="line">	      return handleRequest(&apos;GET&apos;, communicateIp+&apos;api/pre/demo/loginout&apos;, params);</div><div class="line">	    &#125;,</div><div class="line">	    changepersonalPassword: function(params)&#123;</div><div class="line">	      return handleRequest(&apos;GET&apos;, communicateIp+&apos;api/pre/demo/updatePassword&apos;, params);</div><div class="line">	    &#125;,</div><div class="line">	    checkuser: function(params)&#123;</div><div class="line">	    	return handleRequest(&apos;GET&apos;, communicateIp +&apos;api/pre/demo/login&apos;,params);</div><div class="line">	    &#125;</div><div class="line">  	&#125;;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式之中介者模式]]></title>
      <url>http://haoliqiang.github.io/2017/01/08/designPAatterns_mediator/</url>
      <content type="html"><![CDATA[<h2 id="中介者模式概念"><a href="#中介者模式概念" class="headerlink" title="中介者模式概念"></a>中介者模式概念</h2><blockquote>
<p>中介者模式（Mediator），用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。<br><a id="more"></a><br>中介者是一个行为设计模式，通过提供一个统一的接口让系统的不同部分进行通信。一般，如果系统有很多子模块需要直接沟通，都要创建一个中央控制点让其各模块通过该中央控制点进行交互。中介者模式可以让这些子模块不需要直接沟通，而达到进行解耦的目的。</p>
<p>打个比方，平时常见的机场交通控制系统，塔台就是中介者，它控制着飞机（子模块）的起飞和降落，因为所有的沟通都是从飞机向塔台汇报来完成的，而不是飞机之前相互沟通。中央控制系统就是该系统的关键，也就是软件设计中扮演的中介者角色。</p>
<h3 id="Show-code"><a href="#Show-code" class="headerlink" title="Show code"></a>Show code</h3></blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">   function Airplane(name)&#123;</div><div class="line">    if (!(this instanceof Airplane )) &#123;</div><div class="line">        return new Airplane(name);</div><div class="line">    &#125;</div><div class="line">        this.name=name;</div><div class="line">  &#125;;</div><div class="line">  Airplane.prototype.send=function(msg,to)&#123;</div><div class="line">        tower.send(msg,to);</div><div class="line">  &#125;;</div><div class="line">  Airplane.prototype.receive=function(msg)&#123;</div><div class="line">        console.log(this.name+&quot;【接收到】&quot;+msg);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  var tower=&#123;</div><div class="line">        all:&#123;&#125;,</div><div class="line">        init:function (airplane) &#123;</div><div class="line">            this.all[airplane.name]=airplane;</div><div class="line">        &#125;,</div><div class="line">        send:function (msg,to) &#123;</div><div class="line">            this.all[to.name].receive(msg);</div><div class="line">        &#125;</div><div class="line">  &#125;;</div><div class="line">var airplane1=new Airplane(&quot;airplane1&quot;),</div><div class="line">    airplane2=new Airplane(&quot;airplane2&quot;);</div><div class="line">tower.signIn(airplane1);</div><div class="line">tower.signIn(airplane2);</div><div class="line">airplane1.send(&quot;我还有二百米就要降落了&quot;,airplane2);</div></pre></td></tr></table></figure>
<p><em>中介者模式一般应用于一组对象已定义良好但是以复杂的方式进行通信的场合，一般情况下，中介者模式很容易在系统中使用，但也容易在系统里误用，当系统出现了多对多交互复杂的对象群时，先不要急于使用中介者模式，而是要思考一下是不是系统设计有问题。</em></p>
<p><em>另外，由于中介者模式把交互复杂性变成了中介者本身的复杂性，所以说中介者对象会比其它任何对象都复杂</em></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式之构造函数模式]]></title>
      <url>http://haoliqiang.github.io/2017/01/08/designPatterns_constructed/</url>
      <content type="html"><![CDATA[<h2 id="构造函数模式概念"><a href="#构造函数模式概念" class="headerlink" title="构造函数模式概念"></a>构造函数模式概念</h2><blockquote>
<p>构造函数用于创建特定类型的对象–不仅声明了使用的对象，构造函数还可以接受参数以便第一次创建对象的时候设置对象的成员值。你可以自定义自己的构造函数，然后在里面声明自定义类型对象的属性或方法。<br><a id="more"></a><br>在JavaScript里，构造函数通常认为用来实现实例的，JavaScript没有类的概念，但是有特殊的构造函数。通过new关键字来调用自定义的构造函数在构造函数内部，this关键字引用的是新创建的对象。</p>
</blockquote>
<h3 id="Show-code"><a href="#Show-code" class="headerlink" title="Show code"></a>Show code</h3><p><code>需求:</code><em>我年纪大了，想有个小孩，1.这个小孩是我自己私有的，不要对谁都叫爸爸；2.我可能还要二胎，但是第二个小孩，但是我还没有想好这个小孩的名字。</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function Baby(data)&#123;</div><div class="line">    if(!(this instanceof Baby))&#123;</div><div class="line">        return new Baby(data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    this.name=data.name||&apos;郝阿由&apos;; //小孩的姓名</div><div class="line">    this.weight=data.weight||&apos;7斤八两&apos;; //小孩的体重</div><div class="line">    this._create=create;</div><div class="line"></div><div class="line">&#125;</div><div class="line">function create() &#123;</div><div class="line">   return &quot;小孩的名字是&quot;+this.name+&quot;小孩的体重是&quot;+this.weight;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var baby=new Baby(&#123;&#125;);</div><div class="line">console.log( baby._create());</div></pre></td></tr></table></figure>
<h3 id="Review一下"><a href="#Review一下" class="headerlink" title="Review一下"></a>Review一下</h3><ul>
<li>函数名首字母大写，用来区分构造函数和普通函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">function Baby(data)</div></pre></td></tr></table></figure>
<ul>
<li>强制使用new，如果不用new，会把函数中this指到全局对象window上，如<code>var baby=Baby()</code>中baby 的type 是undefined，用window对象却可以调用构造函数Baby中的方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if(!(this instanceof Baby))&#123;</div><div class="line">        return new Baby(data);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>有的人可能会这样写 <code>this.create= function () { return &quot;小孩的名字是&quot;+this.name+&quot;小孩的体重是&quot;+this.weight;};</code> ，这样写有一个问题，就是create()在每次创建对象的时候都重新定义，最好的方法是让所有baby类型的实例都共享这个create()方法， <strong>还有一种实现更好的办法，在原型模式中会聊到</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> this._create=create;</div><div class="line"></div><div class="line">&#125;</div><div class="line">function create() &#123;</div><div class="line">   return &quot;小孩的名字是&quot;+this.name+&quot;小孩的体重是&quot;+this.weight;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="By-the-way"><a href="#By-the-way" class="headerlink" title="By the way"></a>By the way</h3><blockquote>
<p>JavaScript里有3中内置包装构造函数：Boolean(), String(), Number()</p>
<p>只有在想保留数值状态的时候使用这些包装函数：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var s = &quot;s&quot;;//一个字符串</div><div class="line"></div><div class="line">s.name = &quot;s&quot;;</div><div class="line">//对包装对象加了一个方法，执行完毕后立即销毁，第三行读不到 （聊ECMAScript时，会讲为什么）</div><div class="line">console.log(typeof s.name); // &quot;undefined&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var s = new String(&quot;s&quot;);//一个对象 </div><div class="line"></div><div class="line">s.name = &quot;s&quot;;</div><div class="line">// 可以正常访问新属性</div><div class="line">console.log(typeof s.name); // &quot;boolean&quot;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式之原型模式]]></title>
      <url>http://haoliqiang.github.io/2017/01/08/designPatterns_prototype/</url>
      <content type="html"><![CDATA[<h2 id="原型模式概念"><a href="#原型模式概念" class="headerlink" title="原型模式概念"></a>原型模式概念</h2><img src="http://odn6bfovg.bkt.clouddn.com/1200px-Prototype_UML.svg.png" class="full-image" alt="alt" title="title">
<blockquote>
<p>原型模式（prototype）是创建型模式的一种,其特点在于通过「复制」一个已经存在的实例来返回新的实例,而不是新建实例。被复制的实例就是我们所称的「原型」，这个原型是可定制的。<br><a id="more"></a><br>原型模式多用于创建复杂的或者耗时的实例，因为这种情况下，复制一个已经存在的实例使程序运行更高效；或者创建值相等，只是命名不一样的同类数据。</p>
<p>真正的原型继承是作为最新版的ECMAScript5标准提出的，使用Object.create方法来创建这样的对象，该方法创建指定的对象，其对象的prototype有指定的对象（也就是该方法传进的第一个参数对象），也可以包含其他可选的指定属性。例如Object.create(prototype, optionalDescriptorObjects)</p>
</blockquote>
<h3 id="Show-code"><a href="#Show-code" class="headerlink" title="Show code"></a>Show code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// 因为不是构造函数，所以不用大写</div><div class="line">var girl = &#123;</div><div class="line">    name:&apos;郝阿由&apos;,//小孩的姓名</div><div class="line">    weight:&apos;7斤八两&apos; //小孩的体重</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 使用Object.create创建一个女孩</div><div class="line">var bady = Object.create(girl);</div><div class="line">bady.name = &apos;郝美丽&apos;;</div><div class="line">Object.create运行你直接从其它对象继承过来，使用该方法的第二个参数，你可以初始化额外的其它属性。例如：</div><div class="line"></div><div class="line">var girl = &#123;</div><div class="line">    create: function () &#123;</div><div class="line">    return &quot;小孩的名字是&quot;+this.name+&quot;小孩的体重是&quot;+this.weight;</div><div class="line">&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var bady = Object.create(girl, &#123;</div><div class="line">    &apos;name&apos;: &#123;</div><div class="line">        value:&quot;郝美丽&quot;,</div><div class="line">        enumerable: true // 默认writable:false, configurable:false</div><div class="line"> &#125;,</div><div class="line">    &apos;weight&apos;: &#123;</div><div class="line">        value: &apos;7斤八两&apos;,</div><div class="line">        enumerable: true</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><em>这里，可以在Object.create的第二个参数里使用对象字面量传入要初始化的额外属性，其语法与Object.defineProperties或Object.defineProperty方法类型。它允许您设定属性的特性，例如enumerable, writable 或 configurable。</em></p>
<ul>
<li>如果你希望自己去实现原型模式，而不直接使用Object.create 。结合构造函数模式，把上面的代码重新实现：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function Baby(data)&#123;</div><div class="line">    if(!(this instanceof Baby))&#123;</div><div class="line">        return new Baby(data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    this.name=data.name||&apos;郝阿由&apos;; //小孩的姓名</div><div class="line">    this.weight=data.weight||&apos;7斤八两&apos;; //小孩的体重</div><div class="line"></div><div class="line">&#125;</div><div class="line">Baby.prototype.create= function () &#123;</div><div class="line">    return &quot;小孩的名字是&quot;+this.name+&quot;小孩的体重是&quot;+this.weight;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var baby=new Baby(&#123;&#125;);</div><div class="line">console.log( baby.create());</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式之单例模式]]></title>
      <url>http://haoliqiang.github.io/2017/01/08/designPatterns_singleton/</url>
      <content type="html"><![CDATA[<h2 id="单例模式概念"><a href="#单例模式概念" class="headerlink" title="单例模式概念"></a>单例模式概念</h2><p>单例模式，在JavaScript里，单例作为一个命名空间提供者，从全局命名空间里提供一个唯一的访问点来访问该对象。<br><a id="more"></a><br>在JavaScript里，实现单例的方式有很多种，其中最简单的一个方式是使用对象字面量的方法，其字面量里可以包含大量的属性和方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var girl = &#123;</div><div class="line">    name:&apos;郝阿由&apos;,//小孩的姓名</div><div class="line">    weight:&apos;7斤八两&apos;, //小孩的体重</div><div class="line">    create:function () &#123;</div><div class="line">        return &quot;小孩的名字是&quot;+this.name+&quot;小孩的体重是&quot;+this.weight;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>如果以后要扩展该对象，你可以添加自己的私有成员和方法，然后使用闭包在其内部封装这些变量和函数声明。只暴露你想暴露的public成员和方法，并且在使用的时候才初始化,为了节约资源的目的，我们可以另外一个构造函数里来初始化这些代码，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">var Babytest=(function () &#123;</div><div class="line">    // body...</div><div class="line"></div><div class="line"></div><div class="line">    function Baby(data)&#123;</div><div class="line">        if(!(this instanceof Baby))&#123;</div><div class="line">            return new Baby(data);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        this.name=data.name||&apos;郝阿由&apos;; //小孩的姓名</div><div class="line">        this.weight=data.weight||&apos;7斤八两&apos;; //小孩的体重</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    Baby.prototype.create= function () &#123;</div><div class="line">        return &quot;小孩的名字是&quot;+this.name+&quot;小孩的体重是&quot;+this.weight;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">     //实例容器</div><div class="line">    var instance;</div><div class="line"></div><div class="line">    var _static = &#123;</div><div class="line">        name: &apos;Babytest&apos;,</div><div class="line"></div><div class="line">        //获取实例的方法</div><div class="line">        //返回Baby的实例</div><div class="line">        getInstance: function (args) &#123;</div><div class="line">            if (instance === undefined) &#123;</div><div class="line">                instance = new Baby(args);</div><div class="line">            &#125;</div><div class="line">            return instance;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    return _static;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">var baby=Babytest.getInstance(&#123;name:&quot;郝美丽&quot;&#125;);</div><div class="line">console.log( baby.create());</div></pre></td></tr></table></figure>
<p><em>单例一般是用在系统间各种模式的通信协调上</em></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[同步和异步]]></title>
      <url>http://haoliqiang.github.io/2017/01/08/sync_async/</url>
      <content type="html"><![CDATA[<h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><blockquote>
<p>JavaScript语言的执行环境是”单线程”（single thread）。<br>所谓”单线程”，就是指一次只能完成一件任务。<br>如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。</p>
<p>这种模式的好处是实现起来比较简单，执行环境相对单纯；<br>坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。<br>常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），<br>导致整个页面卡在这个地方，其他任务无法执行。</p>
</blockquote>
<a id="more"></a>
<p><strong>为了解决这个问题，Javascript语言将任务的执行模式分成两种：同步（Synchronous）和异步（Asynchronous）。</strong></p>
<h3 id="同步模式"><a href="#同步模式" class="headerlink" title="同步模式"></a>同步模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">同步模式：就是后一个任务等待前一个任务结束，</div><div class="line">然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的；</div></pre></td></tr></table></figure>
<h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;./script.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>同步模式，即阻塞模式，会阻止浏览器的后续处理，停止了后续的解析，因此停止了后续的文件加载（如图像）、渲染、代码执行。<br> js 之所以要同步执行，是因为js中可能有输出document内容、修改dom、重定向等行为，所以默认同步执行才是安全的。<br>一般建议是把<code>&lt;script&gt;</code>放在页面末尾<code>&lt;/body&gt;</code>之前，这样尽可能减少这种阻塞行为，而先让页面展示出来。</p>
<h3 id="异步模式"><a href="#异步模式" class="headerlink" title="异步模式"></a>异步模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">异步模式：每一个任务有一个或多个回调函数（callback），前一个任务结束后，不是执</div><div class="line">行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的</div><div class="line">执行顺序与任务的排列顺序是不一致的、异步的。</div></pre></td></tr></table></figure>
<p><em><code>异步模式</code>又叫非阻塞。在web端，耗时很长的操作都应该异步执行，避免浏览器失去响应，最好的例子<br>就是Ajax操作。在js写server中，<code>异步模式</code>甚至是唯一的模式，因为执行环境是单线程的，如果允许同步执行所有http请求，服务器性能会急剧下降，很快就会失去响应。</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">异步调用并不会阻止代码的顺序执行，而是在将来的某一个时刻触发设置好的逻辑，所以我们</div><div class="line">并不知道逻辑什么时候会被调用</div><div class="line">只能定义当触发的时候逻辑是什么</div><div class="line">只能等待，同时可以去处理其他的逻辑</div><div class="line">异步函数，如setTimeout和setInterval，是被压入了称之为Event Loop的队列。</div><div class="line">Event Loop是一个回调函数队列。当异步函数执行时，回调函数会被压入这个队列。JavaScript引擎</div><div class="line">直到异步函数执行完成后，才会开始处理事件循环。这意味着JavaScript代码不是多线程的，即使表现</div><div class="line">的行为相似。事件循环是一个先进先出（FIFO）队列，这说明回调是按照它们被加入队列的顺序执行的。</div><div class="line">JavaScript被node选做为开发语言，就是因为写这样的代码多么简单啊。</div></pre></td></tr></table></figure></p>
<h4 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;./script.js&quot; async&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>浏览器在下载执行 js 同时，还会继续进行后续页面的处理。<br>这种方法是在页面中<code>&lt;script&gt;</code>标签内，设置async属性，async属性是HTML5中新增的异步支持。</p>
<p><strong>but</strong>这种加载方式在加载执行完之前会阻止 onload 事件的触发，而现在很多页面的代码都在 onload 时还要执行额外的渲染工作等，所以还是会阻塞部分页面的初始化处理。</p>
<p><strong>ps</strong>不管是同步加载还是异步加载,浏览器在下载完 js 的内容后就会立即对其解析和执行。<br>异步加载，解决的只是下载阶段的问题，但代码在下载后会立即执行。<br>浏览器在解析执行 JS 阶段是阻塞任何操作的，这时的浏览器处于无响应状态。<br>下载 script 需要明显的时间，但容易忽略了第二阶段，解析和执行也是需要时间的。script的解析和执行所花的时间比我们想象的要多，尤其是script 很多很大的时候。有些是需要立刻执行，而有些则不需要（比如只是在展示某个界面或执行某个操作时才需要）。<strong>*注：</strong>如何在第一次需要的时候再执行。感兴趣的可以看看<code>ControlJS</code> *</p>
<h4 id="处理异步代码"><a href="#处理异步代码" class="headerlink" title="处理异步代码"></a>处理异步代码</h4><h5 id="callback"><a href="#callback" class="headerlink" title="callback"></a>callback</h5><p>这种异步的方式是最基础的实现:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> fs.readFile(fileA, function (err, data) &#123;</div><div class="line">  fs.readFile(fileB, function (err, data) &#123;</div><div class="line">    // ...</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果涉及到多个这样的异步操作，会有复杂的回调嵌套，就是传说中的回调地狱。</p>
<h6 id="避免这种回调地狱"><a href="#避免这种回调地狱" class="headerlink" title="避免这种回调地狱"></a>避免这种回调地狱</h6><ul>
<li>命名函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">清除嵌套回调的一个便捷的解决方案是简单的避免双层以上的嵌套。</div><div class="line">传递一个命名函数给作为回调参数，而不是传递匿名函数。</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h5><p><a href="">点这里查看详情</a></p>
<h5 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h5><p><a href="">点这里查看详情</a></p>
<h5 id="await-async"><a href="#await-async" class="headerlink" title="await/async"></a>await/async</h5><p><a href="">点这里查看详情</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[codelyzer的部分使用规则粗解]]></title>
      <url>http://haoliqiang.github.io/2016/12/22/codelyzer_rules/</url>
      <content type="html"><![CDATA[<h2 id="codelyzer-特性"><a href="#codelyzer-特性" class="headerlink" title="codelyzer 特性"></a>codelyzer 特性</h2><blockquote>
<p><em>这些规则找到与angular2特性相关的错误</em></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">directive-selector -指令的命名规则</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">component-selector -组件的命名规则</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use-life-cycle-interface -生命周期接口是否需要被实现</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use-pipe-transform-interface -过滤转化接口是否需要被实现</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pipe-naming -过滤（管道）的命名规则</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">component-class-suffix -组件class名称必须带component后缀</div><div class="line">```</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">directive-class-suffix -指令class名称必须带component后缀</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">templates-use-public -html模版只能用公共成员</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">no-access-missing-member -不接受不存在的成员</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">no-unused-css -一些没有用到的css样式</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tslint的部分使用规则粗解]]></title>
      <url>http://haoliqiang.github.io/2016/12/21/tslint_rules/</url>
      <content type="html"><![CDATA[<h2 id="TypeScript-特性"><a href="#TypeScript-特性" class="headerlink" title="TypeScript 特性"></a>TypeScript 特性</h2><blockquote>
<p><em>这些规则找到与TypeScript特性相关的错误</em></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">member-ordering -强制执行成员排序。[object]</div></pre></td></tr></table></figure>
<p><em>类成员的一致排序可以使类更容易阅读，导航和编辑。</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">no-internal-module -内部组合不允许module</div></pre></td></tr></table></figure>
<p><em>使用module导致与外部模块概念混淆。使用新的namespace关键字。</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">prefer-for-of -如果索引仅用于访问要迭代的数组，则建议在标准“for”循环中使用“for-of”循环。</div></pre></td></tr></table></figure>
<p><em>当不需要索引时，for（… of …）循环更容易实现和读取。</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef-whitespace -需要或不允许空白的类型定义。</div></pre></td></tr></table></figure>
<p><em>两个参数都是对象,每个键应该具有的值”space”或”nospace”。</em></p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><blockquote>
<p><em>这些规则捕获JS编程中的常见错误或其他容易产生错误的混淆结构：</em></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">forin -需要for ... in用一个过滤语句if声明。</div></pre></td></tr></table></figure>
<p><em>防止从对象的原型继承的属性的意外获取</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">no-arg -禁止使用的arguments.callee。</div></pre></td></tr></table></figure>
<p><em>使用arguments.callee使得各种性能不容易优化</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">no-bitwise -不允许按位运算符。</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">no-conditional-assignment -在条件语句中不允许任何类型的赋值</div></pre></td></tr></table></figure>
<p><em>使用arguments.callee使得各种性能不容易优化</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">no-console -禁止使用指定的console方法。</div></pre></td></tr></table></figure>
<p><em>console方法是不适合于生产代码</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">no-construct -不允许访问的构造函数String，Number和Boolean。</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">no-debugger -不允许debugger声明。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">no-duplicate-variable -不允许重复变量声明在同一区块范围。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">no-eval -不允许eval函数调用。</div></pre></td></tr></table></figure>
<p><em>它可以执行传给它的任何字符串</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">no-shadowed-variable -不允许隐藏变量声明。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">no-switch-case-fall-through -不允许直接通过case语句。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">no-unused-expression -禁止未使用的表达式语句。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">no-use-before-declare -它们的声明之前不容许变量使用。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">no-var-keyword -将不允许的使用var关键字。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">radix -使用parseInt要指定的radix参数parseInt。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">switch-default -需要一个default在所有情况下的switch语句。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">triple-equals -要求===和!==替换==和!=。</div></pre></td></tr></table></figure>
<h2 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h2><p>这些规则使代码维护更容易：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eofline -确保以新的一行作为文件结尾。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">indent -强制执行与制表符或空格缩进。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">max-line-length -需要线得到一定最大长度下。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">no-trailing-whitespace -不允许在一行的末尾尾随空白。</div></pre></td></tr></table></figure>
<p><em>保持版本控制差异清洁，因为它防止意外的空白被提交</em></p>
<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><p>这些规则在整个代码库中实施一致的风格：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class-name -强制执行PascalCased类和接口的名称。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">comment-format -强制执行单行注释格式规则。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jsdoc格式 -强制执行JSDoc评论的基本格式规则。</div></pre></td></tr></table></figure>
<blockquote>
<p>每行包含一个星号和星号必须对齐<br>每个星号后面必须有空格或换行符（除了第一个和最后一个）<br>每行上的星号之前的唯一字符必须是空格字符<br>一行注释必须以/** 和开头<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new-parens -通过调用构造函数时需要括号new关键字。</div></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">one-line -需要指定的标记与它们之前的表达式在同一行。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">quotemark -需要字符串文字单或双引号。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">semicolon -在每个语句结尾实施一致的分号的使用。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">variable-name -检查各种错误的变量名。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">whitespace -强制执行空白样式约定。</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vue组件]]></title>
      <url>http://haoliqiang.github.io/2016/11/24/vue_component/</url>
      <content type="html"><![CDATA[<blockquote>
<p>以下分享来自团队童鞋<a href="https://github.com/Peggy3399" target="_blank" rel="external">Peggy</a></p>
</blockquote>
<ul>
<li>npm install -g vue-cli  ==&gt;快速生成项目模版的工具</li>
<li>vue init webpack my-project ==&gt;基于webpack的项目</li>
<li>cd my-project</li>
<li>npm install 安装需要的依赖<a id="more"></a>
</li>
</ul>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>Vue的组件化功能可谓是它的一大亮点，通过将页面上某一组件的html、CSS、js代码放入一个.vue的文件中进行管理可以大大提高代码的维护性。<br>目前直接使用ES6的模块化功能，再结合Webpack进行相应打包是最热门的方案。</p>
<blockquote>
<p>基本写法：</p>
</blockquote>
<pre><code>// App.vue
&lt;template&gt;
    &lt;div class=&quot;box&quot; v-text=&quot;note&quot;&gt;&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
    data () {
        return {
            note: &apos;这是一个组件的html模板！&apos;
        }
    }
}
&lt;/script&gt;

&lt;style&gt;
.box {
    color: #000;
}
&lt;/style&gt;
</code></pre><p><a href="https://vuefe.cn/guide/components.html" target="_blank" rel="external">组件</a></p>
<blockquote>
<p> data 必须是函数。</p>
<p>全局注册</p>
</blockquote>
<p>注册全剧组件可以用 Vue.component(tag, constructor) 。</p>
<pre><code>例如： Vue.component(&apos;my-component&apos;, {
          // 选项
        })
</code></pre><p>组件在注册之后，才可以在父实例的模块中以自定义元素 <code>&lt;my-component&gt;</code> 的形式使用(组件名最好使用小写，并且包含一个短杠)。</p>
<pre><code>&lt;div id=&quot;example&quot;&gt;
  &lt;my-component&gt;&lt;/my-component&gt;
&lt;/div&gt;
// 注册
Vue.component(&apos;my-component&apos;, {
  template: &apos;&lt;div&gt;A custom component!&lt;/div&gt;&apos;
})
// 创建根实例
new Vue({
  el: &apos;#example&apos;
})
</code></pre><blockquote>
<p>局部注册</p>
</blockquote>
<p>  用实例选项 components 注册局部组件。局部注册只能在对应的Vue实例下使用，所以它不能在其它Vue实例下使用。</p>
<pre><code>例如：var Child = {
        template: &apos;&lt;div&gt;A custom component!&lt;/div&gt;&apos;
      }
      new Vue({
        // ...
        components: {
          // &lt;my-component&gt; 将只在父模板可用
          &apos;my-component&apos;: Child
        }
      })
</code></pre><h2 id="传递信息"><a href="#传递信息" class="headerlink" title="传递信息"></a>传递信息</h2><p>在 Vue.js 中，父子组件的关系可以总结为 props down, events up 。父组件通过 props 向下传递数据给子组件，子组件通过 events 给父组件发送消息。</p>
<blockquote>
<p>Props</p>
</blockquote>
<p>组件实例的作用域是孤立的。这意味着不能并且不应该在子组件的模板内直接引用父组件的数据。可以使用 props 把数据传给子组件。</p>
<pre><code>Vue.component(&apos;child&apos;, {
  // 声明 props
  props: [&apos;message&apos;],
  // 就像 data 一样，prop 可以用在模板内
  // 同样也可以在 vm 实例中像 “this.message” 这样使用
  template: &apos;&lt;span&gt;{{ message }}&lt;/span&gt;&apos;
})
</code></pre><p>props也可以用 v-bind 绑定动态 props 到父组件的数据。每当父组件的数据变化时，也会传导给子组件。</p>
<pre><code>&lt;div&gt;
  &lt;input v-model=&quot;parentMsg&quot;&gt;
  &lt;br&gt;
  &lt;child :my-message=&quot;parentMsg&quot;&gt;&lt;/child&gt;
&lt;/div&gt;
</code></pre><p>(2)如果要子组件把数据传递给父组件，就需要自定义事件。</p>
<p><a href="https://vuefe.cn/guide/components.html#自定义事件" target="_blank" rel="external">自定义事件</a></p>
<h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p>如果想要动态切换不同的组件，就需要使用动态组件，动态地绑定到它的 is 特性。</p>
<pre><code>var vm = new Vue({
  el: &apos;#example&apos;,
  data: {
    currentView: &apos;home&apos;
  },
  components: {
    home: { /* ... */ },
    posts: { /* ... */ },
    archive: { /* ... */ }
  }
})

&lt;component v-bind:is=&quot;currentView&quot;&gt;
  &lt;!-- 组件在 vm.currentview 变化时改变！ --&gt;
&lt;/component&gt;
</code></pre><p>如果把切换出去的组件想要保留它的状态或避免重新渲染，添加keep-alive指令参数，非活动组件将被缓存。</p>
<pre><code>&lt;keep-alive&gt;
  &lt;component :is=&quot;currentView&quot;&gt;
    &lt;!-- 非活动组件将被缓存！ --&gt;
  &lt;/component&gt;
&lt;/keep-alive&gt;
</code></pre><p>##Slots分发内容</p>
<p>一种方式用来混合父组件的内容与子组件自己的模板。比如说：</p>
<pre><code>&lt;app&gt;
  &lt;app-header&gt;&lt;/app-header&gt;
  &lt;app-footer&gt;&lt;/app-footer&gt;
&lt;/app&gt;
</code></pre><p>app也有自己的模板内容，这时候就需要用到slots。</p>
<blockquote>
<p>编辑作用域</p>
</blockquote>
<p>父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。</p>
<p>分发内容就是在父组件作用域内编译。</p>
<blockquote>
<p>单个Slot</p>
</blockquote>
<p>子组件模板只有一个没有属性的 slot 时，父组件整个内容片段将插入到 slot 所在的 DOM 位置，并替换掉 slot 标签本身。</p>
<p>子组件<code>&lt;my-component&gt;</code>：</p>
<pre><code>&lt;div&gt;
    &lt;h2&gt;I&apos;m the child title&lt;/h2&gt;
    &lt;slot&gt;
      如果没有分发内容则显示我。
    &lt;/slot&gt;
&lt;/div&gt;
</code></pre><p>父组件：</p>
<pre><code>&lt;div&gt;
    &lt;h1&gt;I&apos;m the parent title&lt;/h1&gt;
    &lt;my-component&gt;
      &lt;p&gt;This is some original content&lt;/p&gt;
      &lt;p&gt;This is some more original content&lt;/p&gt;
    &lt;/my-component&gt;
&lt;/div&gt;
</code></pre><p>渲染结果：</p>
<pre><code>&lt;div&gt;
    &lt;h1&gt;I&apos;m the parent title&lt;/h1&gt;
    &lt;div&gt;
      &lt;h2&gt;I&apos;m the child title&lt;/h2&gt;
      &lt;p&gt;This is some original content&lt;/p&gt;
      &lt;p&gt;This is some more original content&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre><blockquote>
<p>具名Slots</p>
</blockquote>
<p>就是带有name的slot,根据name,对应替换slot。可以有一个匿名 slot ，它是默认 slot ，作为找不到匹配的内容片段的备用插槽。没有备用插槽内容则被抛弃。</p>
<p>组件<code>&lt;app-layout&gt;</code>:</p>
<pre><code>&lt;div class=&quot;container&quot;&gt;
    &lt;header&gt;
      &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;
    &lt;/header&gt;
    &lt;main&gt;
      &lt;slot&gt;&lt;/slot&gt;
    &lt;/main&gt;
    &lt;footer&gt;
      &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;
    &lt;/footer&gt;
&lt;/div&gt;
</code></pre><p>父组件模版：</p>
<pre><code>&lt;app-layout&gt;
    &lt;h1 slot=&quot;header&quot;&gt;Here might be a page title&lt;/h1&gt;
    &lt;p&gt;A paragraph for the main content.&lt;/p&gt;
    &lt;p&gt;And another one.&lt;/p&gt;
    &lt;p slot=&quot;footer&quot;&gt;Here&apos;s some contact info&lt;/p&gt;
&lt;/app-layout&gt;
</code></pre><p>渲染结果：</p>
<pre><code>&lt;div class=&quot;container&quot;&gt;
    &lt;header&gt;
      &lt;h1&gt;Here might be a page title&lt;/h1&gt;
    &lt;/header&gt;
    &lt;main&gt;
      &lt;p&gt;A paragraph for the main content.&lt;/p&gt;
      &lt;p&gt;And another one.&lt;/p&gt;
    &lt;/main&gt;
    &lt;footer&gt;
      &lt;p&gt;Here&apos;s some contact info&lt;/p&gt;
    &lt;/footer&gt;
&lt;/div&gt;
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vue路由]]></title>
      <url>http://haoliqiang.github.io/2016/11/24/vue_router1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>以下分享来自团队童鞋<a href="https://github.com/Peggy3399" target="_blank" rel="external">Peggy</a></p>
<p>安装：</p>
</blockquote>
<pre><code>npm install vue-router --save
</code></pre><a id="more"></a>
<p>vue路由主要就是通过使用 router-link(默认会被渲染成一个 <code>&lt;a&gt;</code> 标签) 组件来导航，通过传入 <code>to</code> 属性指定链接, 最后渲染在<code>&lt;router-view&gt;</code>中，实现SPA。</p>
<pre><code>&lt;p&gt;
    &lt;router-link to=&quot;/foo&quot;&gt;Go to Foo&lt;/router-link&gt;
&lt;/p&gt;
&lt;router-view&gt;&lt;/router-view&gt;
</code></pre><p>我目前了解的主要是webpack + ES2015实现vue。如果要实现路由，文件基本写法就是：</p>
<ul>
<li>调用 Vue.use(VueRouter)</li>
<li>定义路由组件(import导入需要渲染的组件)</li>
<li>定义路由</li>
<li>创建router实例</li>
<li>创建挂载根实例(就是路由最终在页面实现的根元素)</li>
</ul>
<blockquote>
<p>基本写法：</p>
</blockquote>
<pre><code>import Vue from &apos;vue/dist/vue&apos;
import VueRouter from &apos;vue-router&apos;

// 1. Use plugin.
// This installs &lt;router-view&gt; and &lt;router-link&gt;,
// and injects $router and $route to all router-enabled child components
Vue.use(VueRouter)

// 2. Define route components
const Home = { template: &apos;&lt;div&gt;home&lt;/div&gt;&apos; }
const Foo = { template: &apos;&lt;div&gt;foo&lt;/div&gt;&apos; }
const Bar = { template: &apos;&lt;div&gt;bar&lt;/div&gt;&apos; }

// 3. Create the router
const router = new VueRouter({
  mode: &apos;history&apos;,
  base: __dirname,
  routes: [
    { path: &apos;/&apos;, component: Home },
    { path: &apos;/foo&apos;, component: Foo },
    { path: &apos;/bar&apos;, component: Bar }
  ]
})

// 4. Create and mount root instance.
// Make sure to inject the router.
// Route components will be rendered inside &lt;router-view&gt;.
new Vue({
  router,
  template: `
    &lt;div id=&quot;app&quot;&gt;
      &lt;h1&gt;Basic&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;router-link to=&quot;/&quot;&gt;/&lt;/router-link&gt;&lt;/li&gt;
        &lt;li&gt;&lt;router-link to=&quot;/foo&quot;&gt;/foo&lt;/router-link&gt;&lt;/li&gt;
        &lt;li&gt;&lt;router-link to=&quot;/bar&quot;&gt;/bar&lt;/router-link&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;router-view class=&quot;view&quot;&gt;&lt;/router-view&gt;
    &lt;/div&gt;
  `
}).$mount(&apos;#app&apos;)
</code></pre><blockquote>
<p>mode(模式)选项取值为： (默认是 “hash”):</p>
</blockquote>
<ul>
<li>“hash” ：hash就是利用#做路由切换</li>
<li>“history” ：history是利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。（需要后台配置）</li>
<li>“abstract” ：abstract一样，只不过，history会记录历史位置</li>
</ul>
<blockquote>
<p>base</p>
</blockquote>
<p>应用的基路径。例如，如果整个单页应用服务在 /app/ 下，然后 base 就应该设为 “/app/“。</p>
<blockquote>
<p>linkActiveClass</p>
</blockquote>
<p>全局配置 <code>&lt;router-link&gt;</code> 的默认『激活 class 类名』</p>
<blockquote>
<p>scrollBehavior 滚动行为</p>
</blockquote>
<p>注意: 这个功能只在 HTML5 history 模式下可用。</p>
<pre><code>const router = new VueRouter({
  routes: [...],
  scrollBehavior (to, from, savedPosition) {
    // return 期望滚动到哪个的位置
  }
})
</code></pre><p>例子1：对于所有路由导航，简单地让页面滚动到顶部。</p>
<pre><code>scrollBehavior (to, from, savedPosition) {
    return { x: 0, y: 0 }
}
</code></pre><p>例子2：返回 savedPosition，在按下 后退/前进 按钮时，就会像浏览器的原生表现那样：</p>
<pre><code>scrollBehavior (to, from, savedPosition) {
    if (savedPosition) {
        return savedPosition
    } else {
        return { x: 0, y: 0 }
    }
}
</code></pre><p>例子3：模拟『滚动到锚点』的行为：</p>
<pre><code>scrollBehavior (to, from, savedPosition) {
    if (to.hash) {
        return {
          selector: to.hash
        }
    }
}
</code></pre><p><a href="https://github.com/vuejs/vue-router/blob/next/examples/scroll-behavior/app.js" target="_blank" rel="external">一个完整例子</a></p>
<h2 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h2><p><code>&lt;router-link&gt;</code>还有以下属性参数：</p>
<ul>
<li>to: 表示目标路由的链接。当被点击后，内部会立刻把 to 的值传到 router.push()，所以这个值可以是一个字符串或者是描述目标位置的对象。</li>
<li>tag: 渲染为的 html 元素类型，默认是<code>&lt;a&gt;</code>.</li>
<li>exact: 用于控制当前激活项的匹配行为。<br>举个例子，如果当前的路径是 /a 开头的，那么<code>&lt;router-link to=&quot;/a&quot;&gt;</code> 也会被设置 CSS 类名。</li>
<li>append: 设置 append 属性后，则在当前（相对）路径前添加基路径。例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b。</li>
<li>replace: 设置 replace 属性的话，当点击时，会调用 router.replace() 而不是 router.push()，于是导航后不会留下 history 记录。</li>
<li>active-class: 当链接项激活时增加的 CSS 样式，默认值: “router-link-active”。</li>
</ul>
<blockquote>
<p>用<code>&lt;router-link&gt;</code>可以渲染外层元素，包裹着内层的原生 <code>&lt;a&gt;</code> 标签。</p>
</blockquote>
<h2 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h2><p>就是组件被渲染时要填的坑。</p>
<blockquote>
<p>路由嵌套</p>
</blockquote>
<p>如果使用路由的嵌套，组件包含自己的嵌套 <code>&lt;router-view&gt;</code>就可以。</p>
<pre><code>const User = {
  template: `
    &lt;div class=&quot;user&quot;&gt;
      &lt;h2&gt;User {{ $route.params.id }}&lt;/h2&gt;
      &lt;router-view&gt;&lt;/router-view&gt;
    &lt;/div&gt;
  `
}
</code></pre><p>这时就需要在路由路径配置当中，写上children，然后进行组件自己的路由，children 配置就是像 routes 配置一样的路由配置数组。</p>
<pre><code>const router = new VueRouter({
  routes: [
    { path: &apos;/user/:id&apos;, component: User,
      children: [
        {
          // 当 /user/:id/profile 匹配成功，
          // UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中
          path: &apos;profile&apos;,
          component: UserProfile
        },
        {
          // 当 /user/:id/posts 匹配成功
          // UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中
          path: &apos;posts&apos;,
          component: UserPosts
        }
      ]
    }
  ]
})
</code></pre><blockquote>
<p>命名视图</p>
</blockquote>
<p>想同时（同级）展示多个视图，而不是嵌套展示,这时可以设置多个出口，也就是<code>&lt;router-view &gt;</code>，如果 <code>&lt;router-view &gt;</code> 没有设置名字，那么默认为 default。</p>
<pre><code>&lt;router-view class=&quot;view one&quot;&gt;&lt;/router-view&gt;
&lt;router-view class=&quot;view two&quot; name=&quot;a&quot;&gt;&lt;/router-view&gt;
&lt;router-view class=&quot;view three&quot; name=&quot;b&quot;&gt;&lt;/router-view

const router = new VueRouter({
  routes: [
    {
      path: &apos;/&apos;,
      components: {
        default: Foo,
        a: Bar,
        b: Baz
      }
    }
  ]
})
</code></pre><h2 id="router的重定向和别名"><a href="#router的重定向和别名" class="headerlink" title="router的重定向和别名"></a>router的重定向和别名</h2><blockquote>
<p>重定向</p>
</blockquote>
<p>重定向我的理解就是重新定方向，本来路由要走的/a这个路由，由于重定向就会改变为/b。<br>写法： </p>
<pre><code>{ path: &apos;/a&apos;, redirect: &apos;/b&apos; }
</code></pre><p>也可以是有name的路由：</p>
<pre><code>{ path: &apos;/a&apos;, redirect: { name: &apos;foo&apos; }}
</code></pre><p>甚至是一个方法，动态返回重定向目标：</p>
<pre><code>const router = new VueRouter({
  routes: [
    { path: &apos;/a&apos;, redirect: to =&gt; {
      // 方法接收 目标路由 作为参数
      // return 重定向的 字符串路径/路径对象
    }}
  ]
})
</code></pre><p><a href="https://github.com/vuejs/vue-router/blob/next/examples/redirect/app.js" target="_blank" rel="external">一个好的例子</a></p>
<blockquote>
<p>别名</p>
</blockquote>
<p>别名就类似于我们的小名，/a 的别名是 /b，意味着，当用户访问 /b 时，URL 会保持为 /b，但是路由匹配则为 /a，就像用户访问 /a 一样。</p>
<p>写法：</p>
<pre><code>{ path: &apos;/a&apos;, component: A, alias: &apos;/b&apos; }
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[redux实践]]></title>
      <url>http://haoliqiang.github.io/2016/11/23/redux_practice/</url>
      <content type="html"><![CDATA[<blockquote>
<p>以下分享来自团队童鞋<a href="http://www.cnblogs.com/yerr1990/" target="_blank" rel="external">huangmin</a></p>
</blockquote>
<p>redux是在看react时用于管理状态(state)，之前一直<a href="http://dict.cn/redux" target="_blank" rel="external">发音</a>错了(美[riː’dʌks]) 。</p>
<p>关于redux + react的<a href="https://github.com/lewis617/react-redux-tutorial" target="_blank" rel="external">例子</a>有很多，很多都是结合react来讲，react-redux中的connect, Provider方便了与redux之间的联系。redux深入理解<a href="http://div.io/topic/1309" target="_blank" rel="external">看这</a></p>
<p>本篇文章中主要提到单纯的去使用和理解<a href="http://cn.redux.js.org//docs" target="_blank" rel="external">redux</a></p>
<a id="more"></a>
<p>为什么用redux</p>
<p>在维护多个react组件时，当涉及到多重传递或者为了组件之间的通讯时，将所有的状态提到顶层再一层一层传递下去或者通过callBack来修改顶层的state, 这样做增加了维护成本，代码可阅读性。而redux是则可以解决react中组件与组件之间数据传递和通讯问题。</p>
<p>需要额外准备的内容:</p>
<p>es6: 箭头函数, 属性的简洁表示法 </p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>redux</code> 是 facebook 提出的 <a href="http://www.ruanyifeng.com/blog/2016/01/flux.html" target="_blank" rel="external"><code>flux</code></a> 架构的一种优秀实现, 不局限于为 react 提供数据状态处理, 可以配合其他框架处理数据。</p>
<p>Redux适用多数据，多交互的场景，设计思想就是用一个大的对象包裹所有的状态，每个状态对应不同的View。</p>
<p>下面是两张分别是<code>flux</code>和<code>redux + react</code>的原理图,引用来自<a href="http://www.ruanyifeng.com" target="_blank" rel="external">阮老师</a>的blog:</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016011503.png" alt="flux"></p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091802.jpg" alt="redux + react"></p>
<p>两者之前的共同点都是数据是单向流动的，都是action动作dispatch派发到store,store则负责维护应用的所有状态,当产生变化时，则会通知view渲染。</p>
<h4 id="redux中有几个常见的名词"><a href="#redux中有几个常见的名词" class="headerlink" title="redux中有几个常见的名词"></a>redux中有几个常见的名词</h4><p><code>action</code>:<br>    <code>action</code>是view发出来的通知,一种动作;<br>    <code>action</code>是修改store数据的唯一来源;<br>    <code>action</code>对象里面type属性是必须的<br><code>dispatch</code>:<br>    <code>store.dispatch</code>是<code>view</code>发出<code>action</code>的唯一方法,<code>dispatch</code>接受一个<code>action</code>作为参数,并将其发送给<code>state</code><br><code>reducer</code>:<br>    <code>reducer</code>是<code>state</code>接收到<code>action</code>的计算过程,通过<code>reducer</code>计算后返回一个新的<code>state</code><br>    <code>reducer</code>是一个纯函数,相同的输入相同的输出<br><code>store</code>:<br>    将<code>action</code>和<code>reducer</code>联系在一起,并保存<code>state</code>的数据,使用<code>createStore</code>函数创建。</p>
<h4 id="store中有几个常用的方法"><a href="#store中有几个常用的方法" class="headerlink" title="store中有几个常用的方法"></a>store中有几个常用的方法</h4><p><code>getState()</code> : 获取<code>store</code>中的<code>state</code><br><code>dispatch(action)</code>: 更新<code>state</code><br><code>subscribe(listener)</code>: 注册和注销监听（返回函数注销监听） </p>
<h4 id="redux中的单向的操作"><a href="#redux中的单向的操作" class="headerlink" title="redux中的单向的操作"></a>redux中的单向的操作</h4><p><code>action</code>(动作) -&gt; <code>reducer</code>(更新<code>state</code>) -&gt; <code>state</code>(返回新的<code>state</code>) -&gt; </p>
<p><code>action</code>(动作) -&gt; <code>reducer</code>(更新<code>state</code>) -&gt; <code>state</code>(返回新的<code>state</code>) -&gt; </p>
<p>为了确保每次同一个<code>action</code>所改变的内容都一样，所以<code>reducer</code>函数里面的内容应该是一个纯函数(详细参考<a href="https://github.com/MostlyAdequate/mostly-adequate-guide" target="_blank" rel="external">FP</a>,这个函数只处理<code>state</code>并返回一个新的<code>state</code>)</p>
<h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><p>现在我们手写一个<code>action</code>和一个<code>action</code>创建函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> ADD = <span class="string">'ADD'</span>;</div><div class="line"></div><div class="line"><span class="comment">//action</span></div><div class="line">&#123;</div><div class="line">  <span class="attr">type</span>: ADD,</div><div class="line">  <span class="attr">text</span>: <span class="string">'Build my first Redux app'</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// action 创建函数</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">type</span>: ADD,</div><div class="line">        text</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看起来很简单是吧，<code>action</code>和<code>action</code>创建函数的区别在于有一个可复用的返回<code>action</code>的方法。</p>
<h3 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h3><p><code>reducer</code>是一个单纯的函数,只要传入参数相同，返回计算得到的下一个 <code>state</code> 就一定相同。</p>
<p>没有不同的返回值、不改变变量，仅仅只是计算, 如:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> add3 = <span class="function">(<span class="params">num</span>) =&gt;</span>  num + <span class="number">3</span>;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> ADD = <span class="string">'ADD'</span>;</div><div class="line"><span class="keyword">const</span> SUB = <span class="string">'SUB'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> initState = &#123;</div><div class="line">    <span class="string">"add"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"sub"</span>: <span class="number">0</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> reducerSimple = <span class="function">(<span class="params">state = initState, action</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">        <span class="keyword">case</span> ADD:</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;<span class="attr">add</span>: <span class="number">1</span>&#125;);</div><div class="line">        <span class="keyword">case</span> SUB:</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;<span class="attr">sub</span>: <span class="number">1</span>&#125;);</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, initState);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>reducerSimple</code>函数所执行的内容是获取<code>action</code>中的<code>type</code>参数并没有修改<code>state</code>的同时返回一个对应的,新的state。</p>
<h4 id="reducer的拆分"><a href="#reducer的拆分" class="headerlink" title="reducer的拆分"></a>reducer的拆分</h4><p>Redux提供了<code>combineReducers</code>方法能够经行<code>reducer</code>的拆分，当<code>reducer</code>需要维护的变量越多时，一个<code>reducer</code>方法会变得难以阅读，这时候则需要拆分<code>reducer</code></p>
<p>combineReducers这个方法做的事情则是产生一个整体的<code>reducer</code>函数，state通过state里面的type去执行子类<code>reducer</code>里面的计算</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 假设有a,b,c三个子reducer</span></div><div class="line"><span class="keyword">const</span> reducer = combineReducers(&#123;</div><div class="line">  <span class="attr">a</span>: a,</div><div class="line">  <span class="attr">b</span>: b,</div><div class="line">  <span class="attr">c</span>: c</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">const</span> reducer = combineReducers(&#123;</div><div class="line">  a</div><div class="line">  b</div><div class="line">  c</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">a</span>: a(state.a, action),</div><div class="line">    <span class="attr">b</span>: b(state.b, action),</div><div class="line">    <span class="attr">c</span>: c(state.c, action)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//如果需要更改key的值</span></div><div class="line"><span class="keyword">const</span> reducer = combineReducers(&#123;</div><div class="line">  <span class="attr">myA</span>: a,</div><div class="line">  <span class="attr">myB</span>: b,</div><div class="line">  <span class="attr">myC</span>: c</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">myA</span>: a(state.myA, action),</div><div class="line">    <span class="attr">myB</span>: b(state.myB, action),</div><div class="line">    <span class="attr">myC</span>: c(state.myC, action)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>store就是用来处理action和reducer, 并注册事件监听和使用dispatch来更新state</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> store = createStore(reducerSimple);</div><div class="line"></div><div class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(store.getState()));</div><div class="line"></div><div class="line">store.dispatch(add(<span class="string">'I am add'</span>));</div><div class="line">store.dispatch(sub(<span class="string">'I am sub'</span>));</div></pre></td></tr></table></figure>
<p>完整代码如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"></div><div class="line"><span class="comment">// public var</span></div><div class="line"><span class="keyword">const</span> ADD = <span class="string">'ADD'</span>;</div><div class="line"><span class="keyword">const</span> SUB = <span class="string">'SUB'</span></div><div class="line"></div><div class="line"><span class="comment">// action </span></div><div class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">type</span>: ADD,</div><div class="line">        text</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">let</span> sub = <span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">type</span>: SUB,</div><div class="line">        text</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// reducer</span></div><div class="line"><span class="keyword">const</span> initState = &#123;</div><div class="line">    <span class="string">"add"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"sub"</span>: <span class="number">0</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> reducerSimple = <span class="function">(<span class="params">state = initState, action</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">        <span class="keyword">case</span> ADD:</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;<span class="attr">add</span>: <span class="number">1</span>, <span class="attr">sub</span>: <span class="number">0</span>&#125;);</div><div class="line">        <span class="keyword">case</span> SUB:</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;<span class="attr">add</span>: <span class="number">0</span>, <span class="attr">sub</span>: <span class="number">1</span>&#125;);</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, initState);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// store</span></div><div class="line"><span class="keyword">let</span> store = createStore(reducerSimple);</div><div class="line"></div><div class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(store.getState()));</div><div class="line"></div><div class="line">store.dispatch(add(<span class="string">'I am add'</span>)); <span class="comment">//&#123; add: 1, sub: 0 &#125;</span></div><div class="line">store.dispatch(sub(<span class="string">'I am sub'</span>)); <span class="comment">//&#123; add: 0, sub: 1 &#125;</span></div></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>继续值得优化的地方:</p>
<ul>
<li>将action, reducer, store, public var, … 分别放在不同的文件夹(actions,reducers,store,constnts),通过es6中module将不同的模块拆分</li>
<li>使用<code>Middleware</code>封装log记录</li>
</ul>
<p>还有更高级的功能去探索:</p>
<ul>
<li>异步action</li>
<li>异步数据流</li>
</ul>
<p>我个人觉得不是所有的项目都需要用到redux。开发过程某一项工具类或者框架的使用应该慎重考虑，在需要用到的地方使用才能发挥出最大的威力。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react中的this.props_this.state详解]]></title>
      <url>http://haoliqiang.github.io/2016/11/22/this.props_this.state/</url>
      <content type="html"><![CDATA[<blockquote>
<p>以下分享来自团队童鞋<a href="https://git.oschina.net/yangjun_123" target="_blank" rel="external">yangjun</a></p>
<ul>
<li>React是单向数据流，数据主要从父节点通过props传递到子节点。</li>
<li>如果顶层（父级）的某个props改变了，React会重渲染所有的子节点。</li>
<li>通常使用props当做数据源，state用来存放状态值（简单的数据）。</li>
<li>通常用props传递大量数据，state用于存放组件内部一些简单的定义数据。<a id="more"></a>
###this.props<br>props是只读的，props用于整个组件树中传递数据和配置。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var MessagesBox = React.createClass(&#123;</div><div class="line">	getDefaultProps:function()&#123;</div><div class="line">		return &#123;title:&quot;我也是死的，没有title传递过来时，我是默认值，读取我！&quot;&#125;</div><div class="line">	&#125;，</div><div class="line">	render:function()&#123;</div><div class="line">		return (</div><div class="line">				&lt;div&gt;&#123;this.props.title&#125;&lt;/div&gt;</div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">var title=&quot;我是死的，用于props传递！&quot;</div><div class="line">React.render(&lt;MessagesBox title=&#123;title&#125; /&gt;,document.getElementById(&apos;app&apos;));</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p>(其中title为外部定义的变量，由父组件传递到子组件，由props进行数据的传递即this.props.title获取数据，当父组件没有向子组件传值时可设置getDefaultProps返回值并进行读取)</p>
<p>#####props中Proptypes验证<br>在开发时使用Proptypes用于验证props传递数据的有效性，数据类型错误时控制台会提示警告（不会报错，也不会阻止代码的后续执行）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">var Propsva = React.createClass(&#123;</div><div class="line">		propTypes: &#123;</div><div class="line">			optionalArray:React.PropTypes.array,</div><div class="line">			optionalBool:React.PropTypes.bool,</div><div class="line">			optionalFunc:React.PropTypes.func,</div><div class="line">			optionalNumber:React.PropTypes.number,</div><div class="line">			optionalObject:React.PropTypes.object,</div><div class="line">			optionalString:React.PropTypes.string,</div><div class="line">		&#125;,</div><div class="line">		getDefaultProps:function()&#123;</div><div class="line">			return &#123;</div><div class="line">				optionalArray:[&quot;我是A&quot;,&quot;我是B&quot;],</div><div class="line">				optionalBool:true,</div><div class="line">				optionalFunc:function(arg)&#123;</div><div class="line">					console.log(arg);</div><div class="line">				&#125;,</div><div class="line">				optionalNumber:100,</div><div class="line">				optionalObject:&#123;</div><div class="line">					object1:&quot;objectvalue1&quot;,</div><div class="line">					object2:&quot;objectvalue2&quot;,</div><div class="line">					object3:&quot;objectvalue3&quot;,</div><div class="line">				&#125;,</div><div class="line">				optionalString:&quot;我的组件&quot;,</div><div class="line">			&#125;;</div><div class="line">		&#125;,</div><div class="line">		render:function()&#123;</div><div class="line">			return (</div><div class="line">				&lt;div&gt;</div><div class="line">					&lt;h2&gt;&#123;this.props.optionalArray&#125;&lt;/h2&gt;</div><div class="line">					&lt;h2&gt;&#123;this.props.optionalBool&#125;&lt;/h2&gt;</div><div class="line">					&lt;h2&gt;&#123;this.props.optionalNumber&#125;&lt;/h2&gt;</div><div class="line">					&lt;h2&gt;&#123;this.props.optionalObject&#125;&lt;/h2&gt;</div><div class="line">					&lt;h2&gt;&#123;this.props.optionalString&#125;&lt;/h2&gt;</div><div class="line">					&lt;h2&gt;&#123;this.props.optionalFunc(&quot;123&quot;)&#125;&lt;/h2&gt;</div><div class="line">				&lt;/div&gt;</div><div class="line">			)</div><div class="line">		&#125;</div><div class="line">&#125;)</div><div class="line">React.render(&lt;Propsva/&gt;,document.getElementById(&quot;app&quot;));</div></pre></td></tr></table></figure></p>
<p>###this.state<br>每个组件都有属于自己的state，state和props的区别在于前者(state)只存在于组件内部，只能从当前组件调用this.setState修改state值（不可以直接修改this.state！）。</p>
<blockquote>
<p>注：一般我们更新子组件都是通过改变state值，更新子组件的props值从而达到更新。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">var MessageBox = React.createClass(&#123;</div><div class="line">	getInitialState:function()&#123;</div><div class="line">		return &#123; num:1 &#125;</div><div class="line">	&#125;,</div><div class="line">	handleClick:function()&#123;</div><div class="line">		this.setState(function(state)&#123;</div><div class="line">			state.num=this.state.num*2</div><div class="line">		&#125;)</div><div class="line">	&#125;,</div><div class="line">	render:function()&#123;	</div><div class="line">		return ( </div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;button onClick=&#123;this.handleClick&#125;&gt;点我改变子组件的值&lt;/button&gt; </div><div class="line">				&lt;Submessage messages=&#123;this.state.num&#125;/&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line">var Submessage = React.createClass(&#123;</div><div class="line">	render:function()&#123;</div><div class="line">		console.log(&quot;渲染&quot;)</div><div class="line">		return (</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;div&gt;点击按钮num×2&lt;/div&gt;</div><div class="line">				&lt;input type=&quot;text&quot; value=&#123;this.props.messages&#125;/&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line">var messageBox = React.render( &lt;MessageBox/&gt;, document.getElementById(&apos;app&apos;))</div></pre></td></tr></table></figure></p>
</blockquote>
<p>这里使用getIniatialState定义一个状态，并通过点击事件改变状态，将改变后的num值通过this.props传递给子组件，当状态改变时，子组件会随着更新并重新渲染</p>
<p>####组件之间进行沟通</p>
<ul>
<li>父子组件沟通<br>通常情况下都是父子组件进行数据沟通<br>1、父组件通过props更新子组件，向上边写的那样<br>　  父组件　→　props　→　子组件<br>2、子组件通过回调函数更新父组件状态<br>　子组件　→　父组件的回调函数　→　子组件调用触发<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">var Son=React.createClass(&#123;</div><div class="line">	render:function()&#123;</div><div class="line">		return (</div><div class="line">			&lt;button onClick=&#123;this.props.refreshParent&#125;&gt;点击我更新父组件&lt;/button&gt;</div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">var Parent = React.createClass(&#123;</div><div class="line">	getInitialState:function()&#123;</div><div class="line">		return &#123;index:0&#125;</div><div class="line">	&#125;,</div><div class="line">	refreshParent:function()&#123;</div><div class="line">		var self=this;</div><div class="line">		this.setState(function(state)&#123;</div><div class="line">			state.index=self.state.index+1</div><div class="line">		&#125;)</div><div class="line">	&#125;,</div><div class="line">	render:function()&#123;</div><div class="line">		return (</div><div class="line">			&lt;div&gt;</div><div class="line">				我是父组件的第&#123;this.state.index&#125;个数值</div><div class="line">				&lt;Son refreshParent=&#123;this.refreshParent&#125;&gt;&lt;/Son&gt;					</div><div class="line">			&lt;/div&gt;</div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">React.render(&lt;Parent/&gt;,document.getElementById(&apos;app&apos;));</div></pre></td></tr></table></figure>
</li>
</ul>
<p>父组件Parent中定义了index状态，并定义了refreshParent方法用于改变index的值，通过props将refreshParent方法传递到子组件，并在子组件中触发执行</p>
<ul>
<li>兄弟组件沟通<br>　1、按照React单向数据流方式，我们需要借助父组件进行传递，通过父组件回调函数改变兄弟组件的props。其实这种实现方式与子组件更新父组件状态的方式是大同小异的。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">var Brother1 = React.createClass(&#123;</div><div class="line">	render:function()&#123;</div><div class="line">		return (</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;button onClick=&#123;this.props.refresh&#125;&gt;点我时我兄弟收到消息&lt;/button&gt;</div><div class="line"></div><div class="line">			&lt;/div&gt;</div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">var Brother2 = React.createClass(&#123;</div><div class="line">	render:function()&#123;</div><div class="line">		return (</div><div class="line">			&lt;div&gt;&#123;this.props.text&#125;&lt;/div&gt;</div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">var Parent = React.createClass(&#123;</div><div class="line">	getInitialState:function()&#123;</div><div class="line">		return &#123;text:&quot;我是brother2&quot;&#125;</div><div class="line">	&#125;,</div><div class="line">	refresh:function()&#123;</div><div class="line">		this.setState(&#123;</div><div class="line">			text:&quot;收到收到！！！&quot;</div><div class="line">		&#125;)</div><div class="line">	&#125;,</div><div class="line">	render:function()&#123;</div><div class="line">		return (</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;h1&gt;兄弟组件更新&lt;/h1&gt;</div><div class="line">				&lt;Brother1 refresh=&#123;this.refresh&#125;/&gt;</div><div class="line">				&lt;Brother2 text=&#123;this.state.text&#125;/&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">React.render(&lt;Parent/&gt;,document.getElementById(&quot;app&quot;));</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　2、当组件中的层级很深时，可使用context跨组件传递数据(但使用过多会造成数据传递混乱)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">var A = React.createClass(&#123;</div><div class="line">    	getInitialState:function()&#123;</div><div class="line">    		return &#123; index:1 &#125;</div><div class="line">    	&#125;,</div><div class="line">        childContextTypes: &#123;</div><div class="line">        	clickFunc:React.PropTypes.func,</div><div class="line">        	index:React.PropTypes.number,</div><div class="line">        &#125;,		    </div><div class="line">        getChildContext: function() &#123;</div><div class="line">             return &#123;</div><div class="line">                clickFunc:this.handleClick,</div><div class="line">                index:this.state.index,</div><div class="line">             &#125;;</div><div class="line">        &#125;,</div><div class="line">        handleClick:function()&#123;</div><div class="line">        	this.setState(&#123;</div><div class="line">        		index:this.state.index*3</div><div class="line">        	&#125;)</div><div class="line">        &#125;,</div><div class="line">        render: function() &#123;</div><div class="line">             return (&lt;B /&gt;);</div><div class="line">        &#125;</div><div class="line">    &#125;);		</div><div class="line">var B = React.createClass(&#123;</div><div class="line">        contextTypes: &#123;</div><div class="line">            clickFunc:React.PropTypes.func,</div><div class="line">            index:React.PropTypes.number,</div><div class="line">        &#125;,</div><div class="line">        render: function() &#123;</div><div class="line">        	console.log(this.context)  //打印出来&#123;clickFunc:handleClick,index:1&#125;</div><div class="line">            return &lt;div onClick=&#123;this.context.clickFunc&#125;&gt;点击我啊&#123;this.context.index&#125;&lt;/div&gt;;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">React.render(&lt;A /&gt;,document.getElementById(&apos;app&apos;));</div></pre></td></tr></table></figure></p>
<p>#####shouldComponentUpdate,componentWillReceiveProps<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">componentWillReceiveProps:function(nextProp,nextState)&#123;</div><div class="line">    console.log(nextProp,nextState+&quot;=====1&quot;)</div><div class="line">	console.log(this.props,this.state+&quot;=====2&quot;)</div><div class="line">	console.log(&apos;子组件将要获得prop&apos;);	</div><div class="line">	this.setState(&#123;</div><div class="line">		count:nextProp.count</div><div class="line">	&#125;,function()&#123;</div><div class="line">		console.log(this.state.count)</div><div class="line">	&#125;)			</div><div class="line">&#125;,</div><div class="line">shouldComponentUpdate:function(nextProp,nextState)&#123;		</div><div class="line">	console.log(nextProp,nextState+&quot;=====3&quot;)</div><div class="line">	console.log(this.props,this.state+&quot;=====4&quot;)</div><div class="line">	if(nextProp.count&gt; 5) return false;</div><div class="line">	return true;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>shouldComponentUpdate方法是react内置的方法，用于控制是否更新，有一个返回值，若为true，则更新，否则，不更新；方法中，nextProps为props改变后的值，而this.props为nextProps的前一个值。</p>
<p>componentWillReceiveProps当props有变动时，在组件更新前，componentWillReceiveProps会优于shouldComponentUpdate执行</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[依赖注入]]></title>
      <url>http://haoliqiang.github.io/2016/11/21/ng1%E4%B8%8Eng2%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%9A%84%E6%AF%94%E8%BE%83/</url>
      <content type="html"><![CDATA[<h3 id="依赖注入是一种软件设计模式，他允许你移除软件组件的硬编码方式，替代的是通过依赖注入制造低耦合的组件不论在编译阶段还是在运行阶段。硬编码就是在程序中将代码写死，低耦合就是尽量让每个模块独立，相关的处理尽量在单个模块中完成。"><a href="#依赖注入是一种软件设计模式，他允许你移除软件组件的硬编码方式，替代的是通过依赖注入制造低耦合的组件不论在编译阶段还是在运行阶段。硬编码就是在程序中将代码写死，低耦合就是尽量让每个模块独立，相关的处理尽量在单个模块中完成。" class="headerlink" title="依赖注入是一种软件设计模式，他允许你移除软件组件的硬编码方式，替代的是通过依赖注入制造低耦合的组件不论在编译阶段还是在运行阶段。硬编码就是在程序中将代码写死，低耦合就是尽量让每个模块独立，相关的处理尽量在单个模块中完成。"></a>依赖注入是一种软件设计模式，他允许你移除软件组件的硬编码方式，替代的是通过依赖注入制造低耦合的组件不论在编译阶段还是在运行阶段。硬编码就是在程序中将代码写死，低耦合就是尽量让每个模块独立，相关的处理尽量在单个模块中完成。</h3><p><br></p>
<h3 id="Angular1有一个内在的注入机制，他可以把你的App分成许多个可重复使用的组件，当需要的时候通过依赖注入把这些自减注入进你的App中去。在需要的地方进行参数传递，这种方法不仅对测试很有用，而且还不会污染全局变量，是很好的设计模式。"><a href="#Angular1有一个内在的注入机制，他可以把你的App分成许多个可重复使用的组件，当需要的时候通过依赖注入把这些自减注入进你的App中去。在需要的地方进行参数传递，这种方法不仅对测试很有用，而且还不会污染全局变量，是很好的设计模式。" class="headerlink" title="Angular1有一个内在的注入机制，他可以把你的App分成许多个可重复使用的组件，当需要的时候通过依赖注入把这些自减注入进你的App中去。在需要的地方进行参数传递，这种方法不仅对测试很有用，而且还不会污染全局变量，是很好的设计模式。"></a>Angular1有一个内在的注入机制，他可以把你的App分成许多个可重复使用的组件，当需要的时候通过依赖注入把这些自减注入进你的App中去。在需要的地方进行参数传递，这种方法不仅对测试很有用，而且还不会污染全局变量，是很好的设计模式。</h3><p><br></p>
<h2 id="Angular1依赖注入的方法"><a href="#Angular1依赖注入的方法" class="headerlink" title="Angular1依赖注入的方法"></a>Angular1依赖注入的方法</h2><ol>
<li>通过函数的参数进行推断式注入声明<h3 id="如果没有明确的声明，Angular1会假定名称就是依赖的名称。因此，它会在内部调用函数对象的toString-方法，分析并提取函数的参数列表，然后通过-injector将这些参数再注入进对象实例。下面是代码示例："><a href="#如果没有明确的声明，Angular1会假定名称就是依赖的名称。因此，它会在内部调用函数对象的toString-方法，分析并提取函数的参数列表，然后通过-injector将这些参数再注入进对象实例。下面是代码示例：" class="headerlink" title="如果没有明确的声明，Angular1会假定名称就是依赖的名称。因此，它会在内部调用函数对象的toString()方法，分析并提取函数的参数列表，然后通过$injector将这些参数再注入进对象实例。下面是代码示例："></a>如果没有明确的声明，Angular1会假定名称就是依赖的名称。因此，它会在内部调用函数对象的toString()方法，分析并提取函数的参数列表，然后通过$injector将这些参数再注入进对象实例。下面是代码示例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function myController($scope,$timeout)&#123;</div><div class="line">	var updateTime = function()&#123;</div><div class="line">		$scope.clock = &#123;</div><div class="line">			time: new Date()</div><div class="line">		&#125;;</div><div class="line">		$timeout(function()&#123;</div><div class="line">			$scope.clock.time = new Date();</div><div class="line">			updateTime();</div><div class="line">		&#125;,1000)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div ng-controller=&apos;myController&apos;&gt;</div><div class="line">	&lt;span&gt;&#123;&#123;clock.time | data:&apos;yyyy-MM-dd hh:mm:ss&apos;&#125;&#125;&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h3 id="创建了一个可以自动更新时间的应用，看看是如何进行依赖注入的。通过设置参数-scope和-timeout，angular1会在内部调用函数的toString-方法，分析并提取函数的参数列表，然后通过-injector将这些参数注入到对象的实例。"><a href="#创建了一个可以自动更新时间的应用，看看是如何进行依赖注入的。通过设置参数-scope和-timeout，angular1会在内部调用函数的toString-方法，分析并提取函数的参数列表，然后通过-injector将这些参数注入到对象的实例。" class="headerlink" title="创建了一个可以自动更新时间的应用，看看是如何进行依赖注入的。通过设置参数$scope和$timeout，angular1会在内部调用函数的toString()方法，分析并提取函数的参数列表，然后通过$injector将这些参数注入到对象的实例。"></a>创建了一个可以自动更新时间的应用，看看是如何进行依赖注入的。通过设置参数$scope和$timeout，angular1会在内部调用函数的toString()方法，分析并提取函数的参数列表，然后通过$injector将这些参数注入到对象的实例。</h3><p><br></p>
<p><font color="#f00" size="5" face="黑体">注意：</font><br><br></p>
<ul>
<li>此方法只适合未经压缩混淆的代码，因为angular1需要解析未经压缩混淆的参数列表。<br><br></li>
</ul>
<ol>
<li>显式的注入声明<h3 id="显式的明确定义一个函数在被调用时需要用到的依赖关系，通过这种方法声明依赖，即使在源代码被压缩，参数名称发生改变的情况下依然可以工作。代码示例："><a href="#显式的明确定义一个函数在被调用时需要用到的依赖关系，通过这种方法声明依赖，即使在源代码被压缩，参数名称发生改变的情况下依然可以工作。代码示例：" class="headerlink" title="显式的明确定义一个函数在被调用时需要用到的依赖关系，通过这种方法声明依赖，即使在源代码被压缩，参数名称发生改变的情况下依然可以工作。代码示例："></a>显式的明确定义一个函数在被调用时需要用到的依赖关系，通过这种方法声明依赖，即使在源代码被压缩，参数名称发生改变的情况下依然可以工作。代码示例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var mycontrollerFactory = function mycontroller($scope,$timeout)&#123;</div><div class="line">	var updateTime = function () &#123;</div><div class="line">        $scope.clock = &#123;</div><div class="line">            time: new Date()</div><div class="line">        &#125;;</div><div class="line">        $timeout(function () &#123;</div><div class="line">            $scope.clock.time = new Date();</div><div class="line">            updateTime();</div><div class="line">        &#125;, 1000);</div><div class="line">    &#125;</div><div class="line">    updateTime();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mycontrollerFactory.$inject = [&apos;$scope&apos;,&apos;$timeout&apos;];</div></pre></td></tr></table></figure>
<h3 id="显式的将我们需要的依赖注入到函数中，所以在函数中参数也可以分别换成其他字段。"><a href="#显式的将我们需要的依赖注入到函数中，所以在函数中参数也可以分别换成其他字段。" class="headerlink" title="显式的将我们需要的依赖注入到函数中，所以在函数中参数也可以分别换成其他字段。"></a>显式的将我们需要的依赖注入到函数中，所以在函数中参数也可以分别换成其他字段。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var mycontrollerFactory = function mycontroller(s,t)&#123;.....&#125;</div></pre></td></tr></table></figure>
<p><font color="#f00" size="5" face="黑体">注意：</font><br><br></p>
<ul>
<li>对于这种声明方式，参数的顺序是十分重要的，因为$inject数组元素的顺序必须和注入的参数顺序一一对应。<br><br></li>
</ul>
<ol>
<li>行内注入声明<h3 id="angular1提供的行内注入方法实际上是一种语法糖，它与前面的提到的通过-inject属性进行声明的原理是一样的，但是允许我们在函数定义的时候从行内将参数传入，这种方法方便简洁，而且避免了在定义的过程中使用临时变量。"><a href="#angular1提供的行内注入方法实际上是一种语法糖，它与前面的提到的通过-inject属性进行声明的原理是一样的，但是允许我们在函数定义的时候从行内将参数传入，这种方法方便简洁，而且避免了在定义的过程中使用临时变量。" class="headerlink" title="angular1提供的行内注入方法实际上是一种语法糖，它与前面的提到的通过$inject属性进行声明的原理是一样的，但是允许我们在函数定义的时候从行内将参数传入，这种方法方便简洁，而且避免了在定义的过程中使用临时变量。"></a>angular1提供的行内注入方法实际上是一种语法糖，它与前面的提到的通过$inject属性进行声明的原理是一样的，但是允许我们在函数定义的时候从行内将参数传入，这种方法方便简洁，而且避免了在定义的过程中使用临时变量。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">angular.module(&apos;app&apos;,[])</div><div class="line">.controller(&apos;mycontroller&apos;,[&apos;$scope&apos;,&apos;$timeout&apos;,function($scope,$timeout)&#123;</div><div class="line">	var updateTime = function () &#123;</div><div class="line">        $scope.clock = &#123;</div><div class="line">            time: new Date()</div><div class="line">        &#125;;</div><div class="line">        $timeout(function () &#123;</div><div class="line">            $scope.clock.time = new Date();</div><div class="line">            updateTime();</div><div class="line">        &#125;, 1000);</div><div class="line">    &#125;</div><div class="line">    updateTime();</div><div class="line">&#125;])</div></pre></td></tr></table></figure>
</li>
</ol>
<p><font color="#f00" size="5" face="黑体">注意：</font><br><br></p>
<ul>
<li>行内声明的方式允许我们直接传入一个参数数组，而不是一个函数，数组的元素是字符串，他们代表的是可以被注入到对象中的依赖名字，最后一个参数就是依赖注入的目标函数对象本身。</li>
</ul>
<h2 id="下面来对比一下ng1与ng2的依赖注入的区别，以login组件为例"><a href="#下面来对比一下ng1与ng2的依赖注入的区别，以login组件为例" class="headerlink" title="下面来对比一下ng1与ng2的依赖注入的区别，以login组件为例"></a>下面来对比一下ng1与ng2的依赖注入的区别，以login组件为例</h2><h2 id="先来看一下angular2的架构图"><a href="#先来看一下angular2的架构图" class="headerlink" title="先来看一下angular2的架构图"></a>先来看一下angular2的架构图</h2><p><img src="http://upload-images.jianshu.io/upload_images/949077-ce2193b397ce7ee8.png?imageMogr2/auto-orient/strip%7CimageView2/2" alt="providerToservice"><br><br><br><em>Angular1</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Login&#123;</div><div class="line">    formValue : &#123;login:string,password:string&#125; = &#123;login:&apos;&apos;,password:&apos;&apos;&#125;;</div><div class="line">    onSubmit()&#123;</div><div class="line">        const service = new LoginService();</div><div class="line">        service.login(this.formValue);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.component(&apos;login&apos;,&#123;</div><div class="line">    controller: Login,</div><div class="line">    controllerAs ; &apos;ctrl&apos;,</div><div class="line">    template:`</div><div class="line">        &lt;form ng-submit = &quot;ctrl.onSubmit()&quot;&gt;</div><div class="line">        Text &lt;input type=&quot;text&quot; ng-model=&quot;ctrl.formValue.login&gt;</div><div class="line">        password  &lt;input type=&quot;password&quot; ng-model=&quot;ctrl.formValue.password&quot;&gt;</div><div class="line">        &lt;button&gt;submit&lt;/button&gt;</div><div class="line">        &lt;/form&gt;</div><div class="line">    `</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><em>Angular2</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Component(&#123;</div><div class="line">    selector:&apos;login&apos;,</div><div class="line">    template:`</div><div class="line">        .....</div><div class="line">    `</div><div class="line">&#125;)</div><div class="line">class Login&#123;</div><div class="line">    onSubmit(formValue:&#123;login:string,password:string&#125;)&#123;</div><div class="line">        const service = new LoginService();</div><div class="line">        service.login(formValue);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="在这里直接把login组件绑定在login-service上的，很难进行独立测试，也降低了它复用的可能性"><a href="#在这里直接把login组件绑定在login-service上的，很难进行独立测试，也降低了它复用的可能性" class="headerlink" title="在这里直接把login组件绑定在login service上的，很难进行独立测试，也降低了它复用的可能性"></a>在这里直接把login组件绑定在login service上的，很难进行独立测试，也降低了它复用的可能性</h3><p><br></p>
<h2 id="with-DI"><a href="#with-DI" class="headerlink" title="with DI"></a>with DI</h2><h3 id="在构造函数里面注射一个LoginService的实例，而不是直接创建"><a href="#在构造函数里面注射一个LoginService的实例，而不是直接创建" class="headerlink" title="在构造函数里面注射一个LoginService的实例，而不是直接创建"></a>在构造函数里面注射一个LoginService的实例，而不是直接创建</h3><p><em>Angular1</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class Login&#123;</div><div class="line">    formValue : &#123;login:string,password:string&#125; = &#123;login:&apos;&apos;,password:&apos;&apos;&#125;;</div><div class="line">    constructor(public service:LoginService)&#123;&#125;</div><div class="line">    onSubmit()&#123;</div><div class="line">        this.service.login(this.formValue);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="我们还需要告诉框架应该创建这个service的实例"><a href="#我们还需要告诉框架应该创建这个service的实例" class="headerlink" title="我们还需要告诉框架应该创建这个service的实例"></a>我们还需要告诉框架应该创建这个service的实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">module.service(&apos;login&apos;,LoginService);</div></pre></td></tr></table></figure>
<p><br><br><em>Angular2</em></p>
<h3 id="同样，在构造函数里面注射一个LoginSerivce的实例"><a href="#同样，在构造函数里面注射一个LoginSerivce的实例" class="headerlink" title="同样，在构造函数里面注射一个LoginSerivce的实例"></a>同样，在构造函数里面注射一个LoginSerivce的实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Login&#123;</div><div class="line">    constructor(public service: LoginService)&#123;&#125;</div><div class="line">    onSubmit(formValue:&#123;login:string,password:string&#125;)&#123;</div><div class="line">        this.service.login(formValue);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>不同于ng1，我们需要将这个service添加到providers列表里面来实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@NgModule(&#123;</div><div class="line">    bootstrap:[Login],</div><div class="line">    providers:[LoginService],</div><div class="line">    declarations:[Login]</div><div class="line">&#125;)</div><div class="line">class AppModule&#123;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="如果注入到它的根模块，则整个应用都可以调用，也可以注入到使用它的组件元数据里面-只需在装饰器加上一个providers配置项-这样注入的服务只对自己和后代可用"><a href="#如果注入到它的根模块，则整个应用都可以调用，也可以注入到使用它的组件元数据里面-只需在装饰器加上一个providers配置项-这样注入的服务只对自己和后代可用" class="headerlink" title="如果注入到它的根模块，则整个应用都可以调用，也可以注入到使用它的组件元数据里面,只需在装饰器加上一个providers配置项,这样注入的服务只对自己和后代可用"></a>如果注入到它的根模块，则整个应用都可以调用，也可以注入到使用它的组件元数据里面,只需在装饰器加上一个providers配置项,这样注入的服务只对自己和后代可用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Component(&#123;</div><div class="line">    selector:&apos;lr&apos;,</div><div class="line">    providers:[LoginService]</div><div class="line">&#125;)</div><div class="line">class APPLr&#123;&#125;</div></pre></td></tr></table></figure>
<p><font color="#f00" size="5" face="黑体">注意：</font></p>
<ul>
<li>ng1依赖于字符串来配置DI，而ng2则默认使用注解的方式<h3 id="ng1里面有好几个Api可以用来给指令注入依赖，有些是根据名称注入的（LoginService）-有些依赖会一直自动提供（link函数里面的），有些需要使用require进行配置"><a href="#ng1里面有好几个Api可以用来给指令注入依赖，有些是根据名称注入的（LoginService）-有些依赖会一直自动提供（link函数里面的），有些需要使用require进行配置" class="headerlink" title="ng1里面有好几个Api可以用来给指令注入依赖，有些是根据名称注入的（LoginService）,有些依赖会一直自动提供（link函数里面的），有些需要使用require进行配置"></a>ng1里面有好几个Api可以用来给指令注入依赖，有些是根据名称注入的（LoginService）,有些依赖会一直自动提供（link函数里面的），有些需要使用require进行配置</h3><br><h3 id="ng2提供了统一的Api用来注入服务，指令等，所有这些内容都会被注入到组件的构造函数里面"><a href="#ng2提供了统一的Api用来注入服务，指令等，所有这些内容都会被注入到组件的构造函数里面" class="headerlink" title="ng2提供了统一的Api用来注入服务，指令等，所有这些内容都会被注入到组件的构造函数里面"></a>ng2提供了统一的Api用来注入服务，指令等，所有这些内容都会被注入到组件的构造函数里面</h3><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3></li>
<li>DI是ng的核心机制之一</li>
<li>他可以使你的代码更加松耦合</li>
<li>提升了可测试性</li>
<li>ng2采用了统一的Api来给组件注入依赖</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react的生命周期和组件]]></title>
      <url>http://haoliqiang.github.io/2016/11/21/react_component_lifeCycle/</url>
      <content type="html"><![CDATA[<blockquote>
<p>以下分享来自团队女童鞋<a href="http://www.cnblogs.com/yerr1990/" target="_blank" rel="external">yerr</a></p>
</blockquote>
<h2 id="三个状态"><a href="#三个状态" class="headerlink" title="三个状态"></a>三个状态</h2><h3 id="1-Mounted"><a href="#1-Mounted" class="headerlink" title="1.Mounted"></a>1.Mounted</h3><p>React components被render解析生成对应的DOM节点，并在插入浏览器的DOM结构的一个过程；</p>
<p>getInitialState ：初始化state<br>getDefaultProps : 初始化props</p>
<a id="more"></a>
<h3 id="2-Update"><a href="#2-Update" class="headerlink" title="2. Update"></a>2. Update</h3><p>一个mounted 的components被重新render的过程；（只有影响了DOM结构时才会被改变）;</p>
<p>shouldComponentUpdate:组件在决定重新渲染（虚拟dom比对完毕生成最终的dom后）之前会调用该函数，该函数将是否重新渲染的权限交给了开发者，该函数默认直接返回true，表示默认直接出发dom更新;</p>
<p>componentWillReceiveProps:当节点初次被放入的时候componentWillReceiveProps并不会被触发。原因是因为 componentWillReceiveProps 经常会处理一些和old props 比较的逻辑，而且会在变化之前执行；不在组件即将渲染的时候触发，这也是这个方法设计的初衷。</p>
<h3 id="3-Unmounted"><a href="#3-Unmounted" class="headerlink" title="3. Unmounted"></a>3. Unmounted</h3><p>一个mounted的RC对应的DOM节点被从DOM结构中移除的过程;<br><img src="https://github.com/yerr1990/yerr1990.github.io/blob/master/images/lifecycle.png" alt="image"><a href="https://github.com/yerr1990/yerr1990.github.io/blob/master/images/lifecycle.png" target="_blank" rel="external">https://github.com/yerr1990/yerr1990.github.io/blob/master/images/lifecycle.png</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">var HelloMessage = React.createClass(&#123;</div><div class="line">      getInitialState:function()&#123; //在被render之前</div><div class="line">        alert(&quot;init&quot;);</div><div class="line">        return &#123;</div><div class="line">          opacity: 0.5,</div><div class="line">          fontSize : &apos;20px&apos;</div><div class="line">        &#125;;</div><div class="line">      &#125;,</div><div class="line">      getDefaultProps:function () &#123;//在被render之前</div><div class="line">        return &#123;</div><div class="line">          name: &quot;mary&quot;</div><div class="line">        &#125;;</div><div class="line">      &#125;,</div><div class="line">      componentWillMount :function () &#123;</div><div class="line">        alert(&quot;will&quot;);</div><div class="line">      &#125;,</div><div class="line">      render: function() &#123;</div><div class="line">        return &lt;h1  style=&#123;this.state&#125;&gt;Hello &#123;this.props.name&#125;&lt;/h1&gt;; //这里也可以使用键值</div><div class="line">      &#125;,</div><div class="line">      componentDidMount:function () &#123;</div><div class="line">        alert(&quot;did&quot;);</div><div class="line">        var _self = this;</div><div class="line">        window.setTimeout(function () &#123;</div><div class="line">          _self.setState(&#123;</div><div class="line">              opacity: 1.,</div><div class="line">              fontSize : &apos;50px&apos;</div><div class="line">          &#125;)</div><div class="line">        &#125;,2000)</div><div class="line">      &#125;,</div><div class="line">      /*componentWillReceiveProps(nextProps) &#123;</div><div class="line">        console.log(&quot;执行componentWillReceiveProps&quot;,nextProps);</div><div class="line">        &#125;</div><div class="line">    */</div><div class="line">     /* shouldComponentUpdate: function(nextProps, nextState) &#123;</div><div class="line">        return true;</div><div class="line">      &#125;*/</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    ReactDOM.render(</div><div class="line">      &lt;HelloMessage name=&quot;john&quot; /&gt;,</div><div class="line">      document.getElementById(&apos;example&apos;)</div><div class="line">    );</div></pre></td></tr></table></figure>
<h2 id="react-组件"><a href="#react-组件" class="headerlink" title="react 组件"></a>react 组件</h2><h3 id="React创建组件的三种方式及其区别"><a href="#React创建组件的三种方式及其区别" class="headerlink" title="React创建组件的三种方式及其区别"></a>React创建组件的三种方式及其区别</h3><h4 id="函数式定义的无状态组件"><a href="#函数式定义的无状态组件" class="headerlink" title="函数式定义的无状态组件"></a>函数式定义的无状态组件</h4><pre><code>在大部分React代码中，大多数组件被写成无状态的组件，
通过简单组合可以构建成其他的组件等；这种通过多个
简单然后合并成一个大应用的设计模式被提倡。
特点：
1.不会被实例化，提高性能；
2.不能访问this对象；
3.没有生命周期；
4.只能访问props
</code></pre><h4 id="es5原生方式React-createClass定义的组件"><a href="#es5原生方式React-createClass定义的组件" class="headerlink" title="es5原生方式React.createClass定义的组件"></a>es5原生方式React.createClass定义的组件</h4><pre><code>React.createClass会自绑定函数方法（不像React.Component只绑定需要关心的函数）导致不必要的性能开销，
增加代码过时的可能性。
</code></pre><h4 id="es6形式的extendsReact-Component定义的组件"><a href="#es6形式的extendsReact-Component定义的组件" class="headerlink" title="es6形式的extendsReact.Component定义的组件"></a>es6形式的extendsReact.Component定义的组件</h4><pre><code>React.Component是以ES6的形式来创建react的组件的，
是React目前极为推荐的创建有状态组件的方式，最终会取代
</code></pre><h3 id="组件api"><a href="#组件api" class="headerlink" title="组件api"></a>组件api</h3><pre><code>设置状态：setState
替换状态：replaceState
设置属性setProps
替换属性replaceProps
强制更新：forceUpdate
获取DOM节点：findDOMNode
判断组件挂载状态：isMounted
</code></pre><p>接下来我们封装一个输出 “Hello World！” 的组件，组件名为 HelloMessage：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//您可能注意到，原生 HTML 元素名称是以小写字母开头的，而自定义 React 组件（类）名称是以大写字母开头的。</div><div class="line">var HelloMessage = React.createClass(&#123;</div><div class="line">  render: function() &#123;</div><div class="line">    return </div><div class="line">    &lt;div className=&quot;content&quot;&gt; //className是js关键字</div><div class="line">    &lt;h1&gt;Hello World！&lt;/h1&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">React.render(</div><div class="line">  &lt;HelloMessage /&gt;,//组件名字</div><div class="line">  document.getElementById(&apos;example&apos;)//要插入的节点</div><div class="line">);</div></pre></td></tr></table></figure>
<p><em>注意，在添加属性时， class 属性需要写成 className ，for 属性需要写成 htmlFor ，这是因为 class 和 for 是 JavaScript 的保留字。</em></p>
<h2 id="复合组件"><a href="#复合组件" class="headerlink" title="复合组件"></a>复合组件</h2><p>我们可以通过创建多个组件来合成一个组件，即把组件的不同功能点进行分离。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">var WebSite = React.createClass(&#123;</div><div class="line">  render: function() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;Name name=&#123;this.props.name&#125; /&gt;</div><div class="line">        &lt;Link site=&#123;this.props.site&#125; /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">var Name = React.createClass(&#123;</div><div class="line">  render: function() &#123;</div><div class="line">    return (</div><div class="line">      &lt;h1&gt;&#123;this.props.name&#125;&lt;/h1&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">var Link = React.createClass(&#123;</div><div class="line">  render: function() &#123;</div><div class="line">    return (</div><div class="line">      &lt;a href=&#123;this.props.site&#125;&gt;</div><div class="line">        &#123;this.props.site&#125;</div><div class="line">      &lt;/a&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">React.render(</div><div class="line">  &lt;WebSite name=&quot;叶蓉蓉&quot; site=&quot; http://www.cnblogs.com/yerr1990&quot; /&gt;,</div><div class="line">  document.getElementById(&apos;example&apos;)</div><div class="line">);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">React.render(</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;MyLabel  text=&#123;TextLabel&#125; /&gt;</div><div class="line">     &lt;MyTextfield /&gt;</div><div class="line">     &lt;MyButton textlabel=&apos;OK&apos; /&gt;</div><div class="line"> &lt;/div&gt;,</div><div class="line">  document.getElementById(&apos;container&apos;)</div><div class="line">);</div><div class="line">//前面的 API 调用将组合的组件呈现到虚拟 DOM 中 ID 为 container 的 &lt;div&gt;— 元素中。</div></pre></td></tr></table></figure>
<h2 id="组件之间的通讯"><a href="#组件之间的通讯" class="headerlink" title="组件之间的通讯"></a>组件之间的通讯</h2><pre><code>【父组件】向【子组件】传值；
【子组件】向【父组件】传值；
没有任何嵌套关系的组件之间传值（PS：比如：兄弟组件之间传值）
</code></pre><h3 id="1-【父组件】向【子组件】传值；"><a href="#1-【父组件】向【子组件】传值；" class="headerlink" title="1.【父组件】向【子组件】传值；"></a>1.【父组件】向【子组件】传值；</h3><p>利用 props 来进行交流</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">// 父组件</div><div class="line">var MyContainer = React.createClass(&#123;</div><div class="line">  getInitialState: function () &#123;</div><div class="line">    return &#123;</div><div class="line">      checked: true</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  render: function() &#123;</div><div class="line">    return (</div><div class="line">      &lt;ToggleButton text=&quot;Toggle me&quot; checked=&#123;this.state.checked&#125; /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 子组件</div><div class="line">var ToggleButton = React.createClass(&#123;</div><div class="line">  render: function () &#123;</div><div class="line">    // 从【父组件】获取的值</div><div class="line">    var checked = this.props.checked,</div><div class="line">        text = this.props.text;</div><div class="line"></div><div class="line">    return (</div><div class="line">        &lt;label&gt;&#123;text&#125;: &lt;input type=&quot;checkbox&quot; checked=&#123;checked&#125; /&gt;&lt;/label&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>但是呢，这里如果组件层层嵌套太深，那么从外到内组件的交流成本就变得很高</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">// 父组件</div><div class="line">var MyContainer = React.createClass(&#123;</div><div class="line">  render: function() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Intermediate text=&quot;where is my son?&quot; /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 子组件1：中间嵌套的组件</div><div class="line">var Intermediate = React.createClass(&#123;</div><div class="line">  render: function () &#123;</div><div class="line">    return (</div><div class="line">      &lt;Child text=&#123;this.props.text&#125; /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 子组件2：子组件1的子组件</div><div class="line">var Child = React.createClass(&#123;</div><div class="line">  render: function () &#123;</div><div class="line">    return (</div><div class="line">      &lt;span&gt;&#123;this.props.text&#125;&lt;/span&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="2【子组件】向【父组件】传值；"><a href="#2【子组件】向【父组件】传值；" class="headerlink" title="2【子组件】向【父组件】传值；"></a>2【子组件】向【父组件】传值；</h3><p>通过【子组件】控制自己的 state 然后告诉【父组件】的点击状态，然后在【父组件】中展示出来。因此，我们添加一个 change 事件来做交互。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">// 父组件</div><div class="line">var MyContainer = React.createClass(&#123;</div><div class="line">  getInitialState: function () &#123;</div><div class="line">    return &#123;</div><div class="line">      checked: false</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  onChildChanged: function (newState) &#123;</div><div class="line">    this.setState(&#123;</div><div class="line">      checked: newState</div><div class="line">    &#125;);</div><div class="line">  &#125;,</div><div class="line">  render: function() &#123;</div><div class="line">    var isChecked = this.state.checked ? &apos;yes&apos; : &apos;no&apos;;</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;div&gt;Are you checked: &#123;isChecked&#125;&lt;/div&gt;</div><div class="line">        &lt;ToggleButton text=&quot;Toggle me&quot;</div><div class="line">          initialChecked=&#123;this.state.checked&#125;</div><div class="line">          callbackParent=&#123;this.onChildChanged&#125;</div><div class="line">          /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 子组件</div><div class="line">var ToggleButton = React.createClass(&#123;</div><div class="line">  getInitialState: function () &#123;</div><div class="line">    return &#123;</div><div class="line">      checked: this.props.initialChecked</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  onTextChange: function () &#123;</div><div class="line">    var newState = !this.state.checked;</div><div class="line">    this.setState(&#123;</div><div class="line">      checked: newState</div><div class="line">    &#125;);</div><div class="line">    // 这里要注意：setState 是一个异步方法，所以需要操作缓存的当前值</div><div class="line">    this.props.callbackParent(newState);</div><div class="line">  &#125;,</div><div class="line">  render: function () &#123;</div><div class="line">    // 从【父组件】获取的值</div><div class="line">    var text = this.props.text;</div><div class="line">    // 组件自身的状态数据</div><div class="line">    var checked = this.state.checked;</div><div class="line"></div><div class="line">    return (</div><div class="line">        &lt;label&gt;&#123;text&#125;: &lt;input type=&quot;checkbox&quot; checked=&#123;checked&#125;                 onChange=&#123;this.onTextChange&#125; /&gt;&lt;/label&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="3-没有任何嵌套关系的组件之间传值"><a href="#3-没有任何嵌套关系的组件之间传值" class="headerlink" title="3.没有任何嵌套关系的组件之间传值"></a>3.没有任何嵌套关系的组件之间传值</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[何时使用指令，服务，控制器]]></title>
      <url>http://haoliqiang.github.io/2016/11/18/angular_directive_service_ctrl/</url>
      <content type="html"><![CDATA[<ul>
<li>Directive(指令)</li>
<li>Controller(控制器)</li>
<li>Service(服务)<br>以上为angular1的核心概念，我们究竟什么以什么样的方式去使用它们。<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><h3 id="Service是单例对象，会经常被传来传去，但是可以保证每次访问的都是同一个实例。所以很多Controler和Directive可以访问它内部的数值，所以它是一个存放数据，实现数据共享的好地方"><a href="#Service是单例对象，会经常被传来传去，但是可以保证每次访问的都是同一个实例。所以很多Controler和Directive可以访问它内部的数值，所以它是一个存放数据，实现数据共享的好地方" class="headerlink" title="Service是单例对象，会经常被传来传去，但是可以保证每次访问的都是同一个实例。所以很多Controler和Directive可以访问它内部的数值，所以它是一个存放数据，实现数据共享的好地方;"></a>Service是单例对象，会经常被传来传去，但是可以保证每次访问的都是同一个实例。所以很多Controler和Directive可以访问它内部的数值，所以它是一个存放数据，实现数据共享的好地方;</h3><br><h3 id="首先创建一个module"><a href="#首先创建一个module" class="headerlink" title="首先创建一个module,"></a>首先创建一个module,</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var module = angular.module(&apos;myModule,[]&apos;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br><br>下一步，创建一个服务，用来管理图书的BookService;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">module.factory(&apos;BookService&apos;,[&apos;rootScope&apos;,function($rootScope)&#123;</div><div class="line">	var service = &#123;</div><div class="line">		books:[</div><div class="line">			&#123; title: &quot;Magician&quot;, author: &quot;Raymond E. Feist&quot; &#125;,</div><div class="line">			&#123; title: &quot;The Hobbit&quot;, author: &quot;J.R.R Tolkien&quot; &#125;</div><div class="line">		],</div><div class="line">		addbook : function(book)&#123;</div><div class="line">			service.books.push(book);</div><div class="line">			$rootScope.$broadcast(&apos;books.updata&apos;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return service;</div><div class="line">&#125;])</div></pre></td></tr></table></figure></p>
<h3 id="这里很好理解，一个对象里面有我要存放的书的集合，还有一个添加图书的方法，这个方法还会在应用上广播一个事件，告诉所有使用我们的服务的人，存放书的集合已经更新了，接下来就是要使用它的东西需要接收这个广播了。"><a href="#这里很好理解，一个对象里面有我要存放的书的集合，还有一个添加图书的方法，这个方法还会在应用上广播一个事件，告诉所有使用我们的服务的人，存放书的集合已经更新了，接下来就是要使用它的东西需要接收这个广播了。" class="headerlink" title="这里很好理解，一个对象里面有我要存放的书的集合，还有一个添加图书的方法，这个方法还会在应用上广播一个事件，告诉所有使用我们的服务的人，存放书的集合已经更新了，接下来就是要使用它的东西需要接收这个广播了。"></a>这里很好理解，一个对象里面有我要存放的书的集合，还有一个添加图书的方法，这个方法还会在应用上广播一个事件，告诉所有使用我们的服务的人，存放书的集合已经更新了，接下来就是要使用它的东西需要接收这个广播了。</h3><p><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">module.controller(&apos;books.list&apos;,[&apos;$scope&apos;,&apos;BookService&apos;,function($scope,BookServie)&#123;</div><div class="line">	$scope.$on(&apos;books.updata&apos;,function(event)&#123;</div><div class="line">		$scope.books = BookService.books;</div><div class="line">		$scope.$apply();</div><div class="line">	&#125;);</div><div class="line">	$scope.books = BookService.books;</div><div class="line">&#125;])</div></pre></td></tr></table></figure></p>
<h3 id="这里就是将前面创建的BookService中存放的books赋值给了controller内部的scope对象。如果我们在controller上创建一个数组，其他地方也要处理书籍的信息，通过scope来维护数据会很麻烦，scope很容易变得混乱不堪，通过一种集中的途径进行数据的管理，更容易理解也可以使代码模块化。所以当需要在不同的地方共享数据的时候，就要依靠服务了，谁要用就注入到谁那里，就这么容易。"><a href="#这里就是将前面创建的BookService中存放的books赋值给了controller内部的scope对象。如果我们在controller上创建一个数组，其他地方也要处理书籍的信息，通过scope来维护数据会很麻烦，scope很容易变得混乱不堪，通过一种集中的途径进行数据的管理，更容易理解也可以使代码模块化。所以当需要在不同的地方共享数据的时候，就要依靠服务了，谁要用就注入到谁那里，就这么容易。" class="headerlink" title="这里就是将前面创建的BookService中存放的books赋值给了controller内部的scope对象。如果我们在controller上创建一个数组，其他地方也要处理书籍的信息，通过scope来维护数据会很麻烦，scope很容易变得混乱不堪，通过一种集中的途径进行数据的管理，更容易理解也可以使代码模块化。所以当需要在不同的地方共享数据的时候，就要依靠服务了，谁要用就注入到谁那里，就这么容易。"></a>这里就是将前面创建的BookService中存放的books赋值给了controller内部的scope对象。如果我们在controller上创建一个数组，其他地方也要处理书籍的信息，通过scope来维护数据会很麻烦，scope很容易变得混乱不堪，通过一种集中的途径进行数据的管理，更容易理解也可以使代码模块化。所以当需要在不同的地方共享数据的时候，就要依靠服务了，谁要用就注入到谁那里，就这么容易。</h3><p><br></p>
<h3 id="形容服务有一个例子特别的形象，A团A连和B团B连去执行任务，"><a href="#形容服务有一个例子特别的形象，A团A连和B团B连去执行任务，" class="headerlink" title="形容服务有一个例子特别的形象，A团A连和B团B连去执行任务，"></a>形容服务有一个例子特别的形象，A团A连和B团B连去执行任务，</h3><p>A团A连发现敌情，要报告给B团B连，军队里只有服从上级，所以他只能报告给A团A营，在一直向上报告直到A、B共同的长官C旅，C旅在下发给B团，直到B连，要是有个特殊情况，相信这时候B连已经死光了，所以才有了通信部门的存在，而这里的通信部门也就是angular中的服务。</p>
<h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><h3 id="Controller应该纯粹的把Service，依赖关系，以及其他对象串连在一起，通过scope关联到view上。Dom操作的部分最好把它放入指令里面"><a href="#Controller应该纯粹的把Service，依赖关系，以及其他对象串连在一起，通过scope关联到view上。Dom操作的部分最好把它放入指令里面" class="headerlink" title="Controller应该纯粹的把Service，依赖关系，以及其他对象串连在一起，通过scope关联到view上。Dom操作的部分最好把它放入指令里面;"></a>Controller应该纯粹的把Service，依赖关系，以及其他对象串连在一起，通过scope关联到view上。Dom操作的部分最好把它放入指令里面;</h3><p><br></p>
<h2 id="Directive"><a href="#Directive" class="headerlink" title="Directive"></a>Directive</h2><h3 id="应用中最复杂的部分应该在指令中，下面来扩展前面的例子，提供一个按钮，通过这个按钮向服务里面添加一本书。"><a href="#应用中最复杂的部分应该在指令中，下面来扩展前面的例子，提供一个按钮，通过这个按钮向服务里面添加一本书。" class="headerlink" title="应用中最复杂的部分应该在指令中，下面来扩展前面的例子，提供一个按钮，通过这个按钮向服务里面添加一本书。"></a>应用中最复杂的部分应该在指令中，下面来扩展前面的例子，提供一个按钮，通过这个按钮向服务里面添加一本书。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">module.directive(&apos;addBookButton&apos;,[&apos;BookService&apos;,function(BookService)&#123;</div><div class="line">	return &#123;</div><div class="line">		restrict:&apos;EA&apos;,</div><div class="line">		replace:true,</div><div class="line">		link:function(scope,ele,attrs)&#123;</div><div class="line">			ele.bind(&apos;click&apos;,function()&#123;</div><div class="line">				BookService.addbook(&#123; title: &quot;Star Wars&quot;, author: &quot;George Lucas&quot; &#125;);</div><div class="line">			&#125;)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;])</div></pre></td></tr></table></figure>
<h3 id="创建了一个指令，目的是向books集合里面添加一本书，books已经注册在服务中，所以可以直接注入服务进行使用。下面将指令应用到视图中"><a href="#创建了一个指令，目的是向books集合里面添加一本书，books已经注册在服务中，所以可以直接注入服务进行使用。下面将指令应用到视图中" class="headerlink" title="创建了一个指令，目的是向books集合里面添加一本书，books已经注册在服务中，所以可以直接注入服务进行使用。下面将指令应用到视图中"></a>创建了一个指令，目的是向books集合里面添加一本书，books已经注册在服务中，所以可以直接注入服务进行使用。下面将指令应用到视图中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;button add-book-button&gt;Add Book&lt;/button&gt;</div></pre></td></tr></table></figure>
<p><br></p>
<h3 id="每当点击按钮的时候都会添加那本书，如果将控制器上面添加一个addBook方法呢，"><a href="#每当点击按钮的时候都会添加那本书，如果将控制器上面添加一个addBook方法呢，" class="headerlink" title="每当点击按钮的时候都会添加那本书，如果将控制器上面添加一个addBook方法呢，"></a>每当点击按钮的时候都会添加那本书，如果将控制器上面添加一个addBook方法呢，</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$scope.addBook = function()&#123;</div><div class="line">	 BookService.addBook( &#123; title: &quot;Star Wars&quot;, author: &quot;George Lucas&quot; &#125; );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="可以得到同样的结果，但是如果需要复用的话，只能copy这段代码，但是通过指令的方式，就会很方便了"><a href="#可以得到同样的结果，但是如果需要复用的话，只能copy这段代码，但是通过指令的方式，就会很方便了" class="headerlink" title="可以得到同样的结果，但是如果需要复用的话，只能copy这段代码，但是通过指令的方式，就会很方便了"></a>可以得到同样的结果，但是如果需要复用的话，只能copy这段代码，但是通过指令的方式，就会很方便了</h3>]]></content>
    </entry>
    
  
  
</search>
